6.statement 对象

	statement提供了两个方法：
		executeQuery(); // select 语句
		executeUpdate(); // Insert Update Delete

	创建一个类：Demo01_statement.java

	public class Demo01_statement {

		public static void main(String[] args){
			//1.获取连接：C3P0连接池
			Connection conn = C3P0Util.getConnection();
			//2.创建一个statement的语句对象
			Statement sta = null;
			ResultSet rs = null;
			try {
				sta = conn.createStatement();
				//3.创建四个语句 CRUD
				String sql1 = "select * from teacher";
				String sql2 = "insert into teacher values(null,'测试用户',20)";
				String sql3 = "update teacher set t_name='测试11' where t_id=1 ";
				String sql4 = "delete from teacher where t_id=2 ";
				//4.执行sql语句
				rs = sta.executeQuery(sql1);
				int row1 = sta.executeUpdate(sql2);
				int row2 = sta.executeUpdate(sql3);
				int row3 = sta.executeUpdate(sql4);

			} catch(Exception e) {

			} finally {
				C3P0Util.close(conn,sta,rs);
			}



		}

	}

	statement的这种写法：是把sql语句直接当做参数引入到方法中执行。
	很容易出现的问题是：
			1.sql语句太多时，占用内容的资源比较大
	for (int i = 1; i <= 10000 ; i++) {
		sta.executeQuery("select * from teacher where t_id="+i);
	}
	sql语句执行时，会把sql语句添加到数据库的sql缓存中，

	 		2. 容易被sql注入！！！！
	 		sql语句因为是使用 变量去拼接字符串
			String name="xuning";
			String password=" '' or 1=1 ";

	 		String sql = " select * from
	 		user where name="+name+" and password="+password;

		 	"select * from user where name='xuning'
		 	and password='' or 1=1 "

		 	这种写法改变了整个sql语句的结构！！！
		 	漏洞：可以使用字符串拼接的方式，绕过登录的验证！！！

7.PreparedStatement对象

    两者之间的关系：
	PreparedStatement implements Statement接口

	写法：预编译对象！！！

	为了防止sql注入，PreparedStatement先规定了一个sql语句的基本结构

	   select * from user where name=? and password=?

	   ?代表的占位符，也就是会进行 替换变量的操作

	    String name="xuning";
		String password=" '' or 1=1 ";

 		String sql = " select * from user where name=? and password=? " ;

        ? 被一个字符串替换了 " '' or 1=1 "
        那么，sql语句就会认为这个?对应的是一个  普通的字符串，
        而这个字符串会直接被当做一个【值】传入sql
	 	"select * from user where name='xuning'
	 	and password=" '' or 1=1 "

	 	这里在查询的时候，就相当于 密码为 '' or 1=1
	 	                而不是 进行 sql语句的拼接了