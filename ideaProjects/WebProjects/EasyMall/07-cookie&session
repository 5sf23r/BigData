1. 今天的内容

    会话技术：
        cookie ：案例：登录页面【记住用户名】
        session ：案例：注册页面【验证码】

    JSP入门学习 ：所有的案例页面，都是jsp的

    准备工作：创建两个web工程，分别命名为：day14-01，day14-02

2. 会话技术

    会话技术的应用范畴：不仅仅是javaweb中存在，其他编程语言也存在
                        只不过写法不一样而已

    会话的概念：一次会话中多次请求和多次响应的一个过程，叫做会话。

        一次会话：打开浏览器，访问了某一个网站，
             直到 你手动关闭浏览器 或者 网站服务器关闭时，会话才会断开


    会话的功能：为什么会有会话这个技术？？？

        一次会话中，多次请求与响应过程中，产生了大量的数据，
        会话技术是让这些数据，在不同的请求过程中，实现数据的共享。

        之前学习的request域对象、response域对象 范围不适用

    cookie：客户端（浏览器）的会话技术
            cookie负责的共享数据是：不需要安全加密的数据

    session：服务器端的会话技术
            session负责的共享数据是：跟用户的信息相关的加密的数据

3.Cookie技术

    Cookie是在浏览器端存储，但是数据是在服务器端做处理！！

    快速入门：
        1. 创建一个cookie对象（服务器端的代码书写）
        2. cookie对象设置一些共享数据（服务器端的代码书写）
        3. 浏览器负责把cookie保存起来（response响应给浏览器，浏览器才能保存）
        4. 获取cookie中的信息（服务器端的代码书写）

4. Cookie的原理：基于 Set-cookie 与 cookie 对象实现的！！

        1.response.addCookie(Cookie对象)
            response响应头（HTTP协议）：Set-cookie : msg="hello cy"

        2.浏览器接收到响应头：Set-cookie
            意味着：浏览器直到Set-cookie的是意思：要把cookie存起来
            存储的位置是：谷歌浏览器的浏览器缓存中

        3. 浏览器发送了另外一个请求：/Cookie02
            request请求头（HTTP协议）：Cookie : msg="hello cy"
            意味着：浏览器发送请求时，自动从cookie缓存中，拿到cookie的数据
                    然后封装到request请求头中，发送给服务器端！！！

        4. 服务器端获取数据：request.getCookies();
            通过request请求获取请求中的cookie参数！！！

        5. 因此，cookie数据实现了不同请求之间的数据共享！！！

5. Cookie的细节问题：
        1. 浏览器关闭后，再次打开，直接获取cookie，能否获取到？？？
            答案：不能
            因为：浏览器关闭，本次会话结束，浏览器缓存中的cookie会默认清空
            所以：再次打开浏览器/Cookie02，直接从浏览器拿不到数据
        2. 一次使用response发送多个cookie对象给浏览器？？
            答案：可以
            方案：
             //1.创建一个cookie对象，并设置数据
            // 参数：是key=vaue的键值对
            Cookie cookie1 = new Cookie("msg1","hello cy1");
            Cookie cookie2 = new Cookie("msg2","hello cy2");
            Cookie cookie3 = new Cookie("msg3","hello cy3");
            Cookie cookie4 = new Cookie("msg4","hello cy4");
            Cookie cookie5 = new Cookie("msg5","hello cy5");
            //2. 把cookie响应给浏览器端，
            // 其中响应过程是服务器与浏览器自动完成的，不需要程序员干预
            response.addCookie(cookie1);
            response.addCookie(cookie2);
            response.addCookie(cookie3);
            response.addCookie(cookie4);
            response.addCookie(cookie5);

        3. Cookie可以在浏览器保存多长时间？
            答案：默认情况下，浏览器关闭，cookie被销毁
            cookie持久化技术：让cookie的生存时间变长，
            比如：时间设置为24个小时，那么cookie就能存在24个小时，
               期间无论浏览器是否关闭，cookie一直存在

            解决方案：cookie.setMaxAge(int seconds); //seconds 秒数
                //1.1设置cookie的存活时间
                cookie1.setMaxAge(60*2);//两分钟
                cookie2.setMaxAge(60*60);//一小时
                cookie3.setMaxAge(60*60*24);//一天

            int secondes： 正数 ： 把数据持久化到硬盘中，存活多长时间
                           负数 ： 默认-1，表示 不适用持久化存储cookie
                           0    ： 如果是0 ， 表示 直接删除一个cookie

            模拟删除cookie的场景：
                1. 先添加一个cookie，并响应给浏览器
                    也就是说cookie经过第一次请求访问，得到响应结果
                2. 浏览器发送另一个请求，获取第一步中存储的cookie
                    并进行cookie的修改：cookie.setMaxAge(0);
                    属性改变之后，cookie对象发生变化，需要重新响应给浏览器
                        response.addCookie(cookie);
                3. 重新发送请求：获取所有的cookie，发现 第二步的cookie没有了

        4. cookie对象中，设置键值对时，value能够为中文？？？

            答案：能支持中文
            支持版本的问题：tomcat 8 之前，不包括8，直接使用中文报错 500错误
                            tomcat 8 之后，包括8，可以直接使用中文

            模拟500错误：创建类Cookie05.java，使用中文进行键值对赋值
                HTTP Status 500 - Control character in cookie value or attribute.

            出现的原因：cookie对象的value值默认只支持 英文，对中文不识别，编码格式的问题。

            解决方案：
                1. 对中文先进行utf-8的编码：URLEncoder.encode(value,charset);
                    编码之前：曹洋
                    编码之后：%E6%9B%B9%E6%B4%8B
                2. 对cookie对象中的value值，获取之后，进行解码操作
                    URLDecoder.decode(value,charset);
                    解码之前：%E6%9B%B9%E6%B4%8B
                    解码之后：曹洋

        5. Cookie的范围有多大？？

            5.1  一个tomcat服务器中，有两个web工程，比如:day14-01，day14-02
                    day14-01中生成的cookie，被存在于浏览器端，
                    那么day14-02中是否能够获取cookie？？？

                 答案：默认情况下，多个web应用之间不能共享数据

                 解决方案：
                    setPath("/");代表的是同一个域名下的所有的web应用都可以访问
                        比如:localhost中所以的web应用
                        http://localhost/day14_01_war_exploded/
                        http://localhost/day14_02_war_exploded/

                    1. 在day14-01中，找到Cookie05, 先打印输出：cookie.getPath();
                        重新设置cookie的路径：cookie.setPath("/");
                    2. 在day14-02中，把01中的代码Cookie02.java复制到02项目中
                        package:cookie/Cookie02
                    3. tomcat配置 deployment --> 01和02都配置

            5.2  cookie可以跨服务器访问吗？？
                答案：能
                解决方案：
                    1.前提条件：一级域名必须一致 : .baidu.com
                        fanyi.baidu.com
                        tieba.baidu.com
                    2. Cookie cookie = new Cookie("msg","hello");
                        cookie.setDomain(".baidu.com");//设置cookie的一级域名

6. Cookie的特点和作用：

    Cookie特点：
        1. Cookie的数据是存在于客户端浏览器中
        2. 浏览器对单个cookie的大小有限制4kb，
           浏览器对 同一个域名下能够最大存放20个cookie

    Cookie的作用：
        1.存储少量的一般的非隐私的数据
        2.在不登录的情况下，完成服务器端对客户端的身份识别
            模拟：谷歌浏览器打开京东，存在购物车的信息
                  IE浏览器打开京东，不存在购物车的信息

7. 综合案例：使用cookie完成登录页面中的【记住用户名】的操作

    准备工作：
        1.找到登录页面的资源 【day14-am资料中】-->【day14-cookie-AM\资源\页面】
        2. 把这两个页面复制到【EasyMall\web\中】
        3. 先进行【project structur】 --> 【source & resource】切换以下
            启动tomcat服务器，页面自动进入到tomcat中

    项目分析：

        1. 【记住用户名】 点击勾选，选中复选框
        2. 【】

    项目开发步骤：
        1. 服务器端代码：创建一个servlet，LoginServlet.java
        2. 客户端代码：编写login.jsp页面
            2.1 在login.jsp页面中，编写一部分java代码，
                主要目的是：从浏览器的cookies中获取 username
            2.2 把username的值 回显到 用户名文本框
            2.3 根据username是否为null，回显 【记住用户名】的复选框



