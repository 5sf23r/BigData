* 目录                                                                          :TOC_5:QUOTE:
#+BEGIN_QUOTE
- [[#web概述][Web概述]]
  - [[#bs][B/S]]
  - [[#cs][C/S]]
  - [[#web概述-1][web概述]]
- [[#html][HTML]]
  - [[#1-html是什么][1. HTML是什么]]
  - [[#2-html的结构][2. HTML的结构]]
  - [[#3-html语法][3. HTML语法]]
  - [[#4-font标签][4. font标签]]
  - [[#5-标题标签][5. 标题标签]]
  - [[#6-列表标签][6. 列表标签]]
    - [[#无序列表][无序列表]]
    - [[#有序列表][有序列表]]
  - [[#7-img标签----图像标签][7. img标签 -- 图像标签]]
  - [[#8-超链接----a锚][8. 超链接 -- <a>锚]]
  - [[#9-表格标签----table][9. 表格标签 -- <table>]]
- [[#表单][表单]]
  - [[#1-表单][1. 表单]]
  - [[#2-表单中的项][2. 表单中的项]]
  - [[#3-注册表单练习][3. 注册表单练习]]
- [[#css][CSS]]
  - [[#1-网页组织的两种常用方式][1. 网页组织的两种常用方式]]
  - [[#2-容器标签][2. 容器标签]]
  - [[#3-css的概念][3. CSS的概念]]
  - [[#4-css的四种引入方式][4. CSS的四种引入方式]]
  - [[#5-css引入顺序][5. CSS引入顺序]]
  - [[#6-css基本选择器][6. CSS基本选择器]]
  - [[#7-css扩展选择器][7. CSS扩展选择器]]
  - [[#8-拓展css中的常用属性简介][8. 拓展：CSS中的常用属性简介]]
- [[#javascript][JavaScript]]
  - [[#1-js概述][1. js概述]]
  - [[#2-javascript不得不说的历史][2. JavaScript不得不说的历史]]
  - [[#3-js和html的结合][3. js和html的结合]]
  - [[#4-consolelog使用][4. console.log使用：]]
  - [[#5-js的语法-数据类型][5. js的语法-数据类型]]
  - [[#6-js语法--运算符][6. Js语法--运算符]]
  - [[#7-定义变量][7. 定义变量]]
  - [[#8-js语法--语句][8. js语法--语句]]
  - [[#9-js语法--函数][9. js语法--函数]]
  - [[#10-js语法--数组][10. js语法--数组]]
  - [[#10-js语法-对象][10. js语法-对象]]
  - [[#11-json][11. JSON]]
- [[#dhtml-动态html][DHTML-动态html]]
  - [[#1-dhtml概述][1. DHTML概述]]
  - [[#2-bom和dom][2. BOM和DOM]]
  - [[#3-bom--浏览器对象模型][3. BOM--浏览器对象模型]]
  - [[#4-dom--文档对象模型][4. DOM--文档对象模型]]
  - [[#5-问题][5. 问题：]]
- [[#jquery][jQuery]]
  - [[#1-jquery概述][1. jQuery概述]]
  - [[#2-jquery的优势][2. jQuery的优势]]
  - [[#3-jquery版本支持][3. jQuery版本支持]]
  - [[#4-jquery引入][4. jQuery引入]]
  - [[#5-jquery的使用方式][5. jQuery的使用方式]]
  - [[#6-js对象和jquery对象的相互转换][6. js对象和jQuery对象的相互转换]]
- [[#git][Git]]
- [[#mysql][MySQL]]
  - [[#1-数据库概述][1. 数据库概述]]
  - [[#2-sql语句---库表操作][2. SQL语句---库、表操作]]
  - [[#3-数据库的crud][3. 数据库的CRUD]]
  - [[#4-备份回复数据库][4. 备份、回复数据库]]
  - [[#5-多表设计][5. 多表设计]]
  - [[#6-外键约束][6. 外键约束]]
  - [[#7-多表查询][7. 多表查询]]
  - [[#8-扩展][8. 扩展]]
#+END_QUOTE

* Web概述
** B/S
Browser - Server
- 浏览器服务器模型 WEBQQ 网页游戏
     1. 优点：
        不需要下载客户端程序，使用浏览器可以直接访问，程序的升级操作是在服务器端进行的，浏览器只需要刷新页面就可以看到升级后的效果，不需要停机更新
     2. 缺点：
       画面不精美， 浏览器具有一定的局限性，页面的展示能力仍然是很差，所有的页面数据都需要从服务器实时的获取，所以对网速的依赖很高
** C/S
Client - Server
- 客户端服务器模型 QQ LOL
  1. 优点：
     画面精美，客户端可以任意的设计，页面的展示能力就可以很强，由于大量的资源都已经保存在了客户端，和服务器交互的仅仅是一些变化的数据，所以对网速的依赖很低
  2. 缺点：
     第一次使用时需要下载客户端程序，一旦程序需要升级操作，所有的客户端程序都需要升级，在有些场景中是不能被接受
** web概述
[[./Img/1.png]]
* HTML
** 1. HTML是什么
   - HTML（Hyper Text Mark-up Language）超文本标记语言，最基础的网页语言 W3C
   - HTML 不是一门编程语言，而是一门标记语言
   - HTML 是用标记（标签/元素）来描述网页内容的
   - HTML 是文档的一种
** 2. HTML的结构
   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content-type" content="text/html"; charset="UTF-8" />
         <title></title>
       </HEAD>
       <BODY>
         体标签：存储组成页面的标签
       </BODY>
     </HTML>
   #+END_SRC
   - <!DOCTYPE HTML>用来指定当前页面所遵循的html的版本
   - <head></head>头部文件用来存放html页面的基本属性信息，优先被加载
   - <body></body>体部分用来存放页面数据，是可见的页面内容
     + <tittle></tittle>指定网页的标题
     + <meta http-equiv="Content-type" content="text/html;charset=UTF-8"/>其中的charset的值用来指定浏览器用什么编码解析当前页面
   + 页面中的标签自上而下的加载。head中的内容会在body之前加载。
** 3. HTML语法
   - HTML标签分为开始标签和结束标签，如果标签内没有修饰的内容，开始标签和结束标签可以合并为一个自闭标签。如：<br/>换行；<hr/>在当前行画一条线
   - 标签通常都可以具有属性，属性与属性值用"="连接，属性的值可以用双引号、单引号引起来或者不用引号，一般会用双引号引起来。
     + 如果不生效查看页面代码使用的是否为英文双引号
   - HTML中对页面中代码需要做注释：<!--html的注释-->
   - HTML中多个连续的空白字符（制表符，空格，换行）默认会合并为一个空格来显示。
     + 如果非要输入空格，可以用转义字符来替换&nbsp;
     + 如果非要输入换行，可以用<br/>来代替
     + 转义字符
       |------+----------|
       |      | 转义字符 |
       | <    | &lt;     |
       | >    | &gt;     |
       | "    | &quot;   |
       | '    | &apos;   |
       | 空格 | &nbsp;   |
       |------+----------|


   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content-Type" content="text/heml"; charset="UTF-8" />
         <title>我是第一个网页</title>
         头信息标签：存储优先加载的内容，比如HTML的配置信息
       </HEAD>
       <BODY>
         体标签：存储组成页面的标签
         <!-- HTML注释 -->
         <br/>
         我是一个换行标签
         <br/>
         我是一个换行标签
         <br/>
         我是一个空              格
         我是一个空&nbsp;&nbsp;&nbsp;格
         <br/>
         &lt;hr/&gt;是在页面中换一条线
         <hr/>
         双引号&quot;
         <br/>
         单引号&apos;
       </BODY>
     </HTML>
   #+END_SRC
   [[./Source Code/1.html]]

** 4. font标签
   用来指定文本的字体/大小/颜色
   + color：指定字体的颜色
     1. 值可以指定为颜色名，如：red
     2. 或十六进制的颜色，如：#000000
     3. 或rgb三原色值，如：rgb(255,255,255)；ie适用
   + 例：<font size=5 color=red>字体标签示例</font>

     #+BEGIN_SRC html
       <!DOCTYPE HTML>
       <HTML>
         <HEAD>
           <meta http-equiv="Content=text/html"; charset="UTF-8" />
           <title></title>
         </HEAD>
         <BODY>
           <!-- HTML标签属性 -->
           <font color='red' size=7>我是一个font</font>
         </BODY>
       </HTML>
     #+END_SRC
     [[./Source Code/3.html]]
** 5. 标题标签
   指定特定样式字体的一组标签
   + 属性
     align：指定文本的排列
     |---------+--------|
     | left    | 靠左   |
     | center  | 居中   |
     | right   | 靠右   |
     | justify | 自适应 |
     |---------+--------|
     #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content=text/html"; charset="UTF-8" />
         <title></title>
       </HEAD>
       <BODY>
         <!-- HTML标签属性 -->
         <font color='red' size=7>我是一个font</font>
         <hr/>
         <h1 align="center">一级标签</h1>
         <h2 align="right">二级标签</h2>
         <h3>三级标签</h3>
         <h4>四级标签</h4>
       </BODY>
     </HTML>
     #+END_SRC
     [[./Source Code/4.html]]
** 6. 列表标签
*** 无序列表
+ <ul>定义一个无序列表
+ <li>定义列表中的项
+ 属性
  type：定义项目符号的类型。disc(实心圆)、square(实心方块)、circle(空心圆)

#+BEGIN_SRC html
    <!DOCTYPE HTML>
    <HTML>
      <HEAD>
        <meta http-equiv="Content=text/html"; charset="UTF-8" />
        <title></title>
      </HEAD>
      <BODY>
        <!-- HTML标签属性 -->
        <font color='red' size=7>我是一个font</font>
        <hr/>
        <h1>列表标签</h1>
        <h2>无序列表</h2>
        <ul type="square">
          <li>spring</li>
          <li>summer</li>
          <li>auto</li>
          <li>winter</li>
        </ul>
      </BODY>
    </HTML>
#+END_SRC
[[./Source Code/5.html]]

*** 有序列表
#+BEGIN_SRC html
  <!DOCTYPE HTML>
  <HTML>
    <HEAD>
      <meta http-equiv="Content=text/html"; charset="UTF-8" />
      <title></title>
    </HEAD>
    <BODY>
      <!-- HTML标签属性 -->
      <font color='red' size=7>我是一个font</font>
      <hr/>
      <h1>列表标签</h1>
      <h2>有序列表</h2>
      <ol>
        <li>阿一</li>
        <li>阿二</li>
        <li>毛毛</li>
      </ol>
    </BODY>
  </HTML>
#+END_SRC
[[./Source Code/6.html]]
** 7. img标签 -- 图像标签
   - 必选属性：
     1. src:图片的路径
     2. alt:代替图像显示的文本
   - 可选属性
     1. width:宽度px%
     2. height:高度px%
     3. border:边框的宽度px
   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content=text/html"; charset="UTF-8" />
         <title></title>
       </HEAD>
       <BODY>
         <!-- HTML标签属性 -->
         <h1>图片标签</h1>
         <img src="../image/5.jpg" alt="此处是一个美女" width="50px" height="50px"/>
       </BODY>
     </HTML>
   #+END_SRC
   [[./Source Code/7.html]]
** 8. 超链接 -- <a>锚
   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content=text/html"; charset="UTF-8" />
         <title>锚标签 -- 文档内部跳转</title>
       </HEAD>
       <BODY>
         <a name="tag"></a>
         <h1>兰刚传</h1>
         <p>
           初出茅庐，什么都不会
         </p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>
         <p>开始修炼</p>

         <p>都学会了，刀枪剑戟斧钺钩叉</p>
         <a href="#tag">返回上层</a>
       </BODY>
     </HTML>
   #+END_SRC
   [[./Source Code/8.html]]
   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <meta http-equiv="Content=text/html"; charset="UTF-8" />
         <title></title>
       </HEAD>
       <BODY>
         <h1>锚标签</h1>
         <a href="http://www.baidu.com" target="_blank">跳转到baidu</a>
       </BODY>
     </HTML>

   #+END_SRC
   [[./Source Code/9.html]]
   - 用于指向当前位置以外的资源
     1. 用于创建指向另外一个文档的超链接
     2. 用于在当前页面的不同位置之间进行跳转，利用id或name属性进行跳转
        一般在本页面中使用，当网页内容过长，定位标记会比拖动滚动条方便快捷。
        + 注：定位标记要和超链接结合使用才有效
        + 注：使用定位标记时一定在href值的开始加入#标记名
   - 重要属性
     + href：所指向资源的URL
     + name：指定锚的名字
     + target：指定浏览器打开目标URL的方式
       |--------+-------------------------|
       | _blank | 在新窗口中打开目标url   |
       | _self  | 在当前窗口中打开目标url |
       |--------+-------------------------|
** 9. 表格标签 -- <table>
   |---------+--------------------|
   | <table> | 定义一个HTML的表格 |
   | <tr>    | 定义表格中的行     |
   | <td>    | 定义表格中的单元格 |
   | <th>    | 定义表格中的表头   |
   |---------+--------------------|
   - table的重要属性
     |-------------+----------------------------|
     | border      | 边框宽度                   |
     | cellspacing | 单元格之间的空白举例       |
     | cellpadding | 边框与单元格内容之间的举例 |
     | bgcolor     | 背景颜色                   |
     | bordercolor | 边框颜色                   |
     | width       | 宽度                       |
     | align       | 对齐方式                   |
     |-------------+----------------------------|
   - tr的重要性
     |---------+----------|
     | align   | 对齐方式 |
     | bgcolor | 背景颜色 |
     |---------+----------|
   - th/td重要属性
     |-----------+----------------|
     | align     | 对齐方式       |
     | bgcolor   | 背景颜色       |
     | width     | 宽度           |
     | height    | 高度           |
     | colspan   | 可横跨的列数   |
     | rowspan   | 可竖跨的行数   |
     | <caption> | 定义表格的标题 |
     |-----------+----------------|

     #+BEGIN_SRC html
       <!DOCTYPE HTML>
       <HTML>
         <HEAD>
           <meta http-equiv="Content=text/html"; charset="UTF-8" />
           <title>表格标签</title>
         </HEAD>
         <BODY>
           <table border="2" cellspacing="0" cellpadding="5px" bgcolor="red" bordercolor="yellow" width="400px" align="center">
             <caption align="bottom">大数据</caption>
             <tr bgcolor="pink">
               <th>大数据</th>
               <th>UI</th>
               <th>Java</th>
             </tr>
             <tr>
               <td align="right" bgcolor="brown">1</td>
               <td align="center">2</td>
               <td >3</td>
             </tr>
             <tr>
               <td width="50px" height="500px">4</td>
               <td colspan="2">5</td>
               <td rowspan="2">6</td>
             </tr>
           </table>
         </BODY>
       </HTML>

     #+END_SRC
     [[./Source Code/10.html]]

* 表单
   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <HTML>
       <HEAD>
         <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="TEXT/HTML";CHARSET="UTF-8" />
         <TITLE>表单标签</TITLE>
       </HEAD>
       <BODY>
         <FORM ACTION="HTTP://WWW.BAIDU.COM" METHOD="GET">
           姓名：<INPUT TYPE="TEXT" NAME="USERNAME" />
           密码：<INPUT TYPE="PASSWORD" NAME="PASSWORD"/>
           确认密码：<INPUT TYPE="PASSWORD" NAME="REPASSWORD"/>
           性别：<INPUT TYPE="RADIO" NAME="GENDER" VALUE="MALE"/>男
           <INPUT TYPE="RADIO" NAME="GENDER" VALUE="FEMALE"/>女
           爱好：<INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="EAT"/>吃
           </BR>
           <INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="DRINK"/>喝
           <INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="SLEEP"/>睡
           头像：<INPUT TYPE="FILE" NAME="HEAD" />
           <INPUT TYPE="BUTTON" VALUE="点击爆炸" ONCLICK=""/>
           <INPUT TYPE="SUBMIT" />
           <input type="reset" />

           <input type="image" src="../image/5.jpg" />
           <input type="hidden" value="123" />
         </form>
       </BODY>
     </HTML>
   #+END_SRC
** 1. 表单
   - 浏览器向服务器发送数据的方式，有两种：
     1. 利用超链接向服务器发送数据 -- 请求参数
        在超链接的后面拼接上要发送的请求参数，链接和请求参数之间用?分割，参数名和参数值用=连接，多个参数之间用&分割，可以存在多个同名的参数
     2. 利用表单向服务器发送数据
        利用HTML中的<form>标签以及一些表单项标签，用户可以输入数据，通过提交表单发送数据给服务器
   - form标签
     1. 必须存在的属性
        action：指定表单发送的目标URL地址
     2. 可选的属性：
        method：指定以何钟方式发送表单
     3. http协议指定了7种提交方式，其中5种使用的极少，多数只用GET提交和POST提交
     4. 只有使用表单并且明确的指定提交方式为post时（也就是设置method="post""）才是POST提交，其他提交都是GET提交
     5. Get提交和POST提交的区别
        主要区别体现在数据传输方式的不相同
        + GET提交：请求参数会赋在地址栏后进行传输，这种方式发送的数据量有限，最大不超过1kb（或4kb），数据显示在地址栏，安全性差
        + POST提交：请求参数在底层流中传输，这种方式发送的数据量无限制，地址栏上看不到数据，比较安全
     6. 提交方式一共有7种：
        常用的有两种get和post
** 2. 表单中的项
#+BEGIN_SRC html
  <HTML>
    <HEAD>
      <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="TEXT/HTML";CHARSET="UTF-8" />
      <TITLE>表单标签</TITLE>
    </HEAD>
    <BODY>
      <FORM ACTION="HTTP://WWW.BAIDU.COM" METHOD="GET">
        姓名：<INPUT TYPE="TEXT" NAME="USERNAME" />
        密码：<INPUT TYPE="PASSWORD" NAME="PASSWORD"/>
        确认密码：<INPUT TYPE="PASSWORD" NAME="REPASSWORD"/>
        性别：<INPUT TYPE="RADIO" NAME="GENDER" VALUE="MALE"/>男
        <INPUT TYPE="RADIO" NAME="GENDER" VALUE="FEMALE"/>女
        爱好：<INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="EAT"/>吃
             </BR>
             <INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="DRINK"/>喝
             <INPUT TYPE="CHECKBOX" NAME="LIKE" VALUE="SLEEP"/>睡
             头像：<INPUT TYPE="FILE" NAME="HEAD" />
             <INPUT TYPE="BUTTON" VALUE="点击爆炸" ONCLICK=""/>
             <INPUT TYPE="SUBMIT" />
             <input type="reset" />

             <input type="image" src="../image/5.jpg" />
             <input type="hidden" value="123" />

             <select name="city">
               <option>---请选择---</option>
               <option>北京</option>
               <option>上海</option>
               <option>深圳</option>
               <option selected="selected" value="wuhan">武汉</option>
             </select>
             <textarea name="test" rows="10" cols="10">我是一个textarea</textarea>
      </form>
    </BODY>
  </HTML>


#+END_SRC
[[./SourceCode/12.html]]
   表单中可以有多个输入项，输入项必须有name属性才可以被提交，如果输入项没有name属性，则表单在提交时会忽略它
   - <input>输入框
     + 重要属性
       1. type属性
          |----------------+--------------------------------------------------------------|
          | 文本框text     | 输入的文本信息直接显示在框中                                 |
          | 密码框password | 输入的文本以圆点或者星号的形式显示                           |
          | 单选框radio    | 进行单项的选择如性别选择，多个radio的name属性相同会被当作一  |
          |                | 来使用，必须yongcalue为选项指定提交的值                      |
          | 复选框checkbox | 进行多项选择，爱好的选择。多个checkbox具有相同的name属性时   |
          |                | 会被当作一组类使用必须用value为选项指定提交的值              |
          | 隐藏字段hidden | 如果有一些信息，不希望用户看见，又希望表单能够提交，就可以用 |
          |                | 隐藏字段隐含在表单中                                         |
          | 提交按钮submit | 实现表单提交操作的按钮，可以通过value属性指定按钮显示的文字  |
          | 重置按钮reset  | 重置表单到初始状态                                           |
          | 按钮button     | 普通按钮，没有任何功能，需要配合JavaScript为按钮指定具体的   |
          |                | 行为。可以用value属性指定按钮显示的文字                      |
          | 文件上传项file | 提供选择文件进行上传的功能                                   |
          | 图像image      | 利用一张图片替代提交按钮的功能，不常用                       |
          |----------------+--------------------------------------------------------------|
       2. name属性
          表单中可以有多个输入项，输入项必须有name属性才可以被提交，如果输入项没有name属性，则表单在提交时会忽略它，另外name属性的值是可以重复的
       3. value属性：
          可以给input输入框设置一个初始值
       4. readonly属性：
          使当前输入项变为只读，不能修改，但是提交时仍会被提交
       5. disabled：
          使当前输入项不可用，不能修改值，也不会被提交
       6. size属性：
          指定当前输入框的宽度
       7. checked属性；
          指定单选框/复选框被选中
   - <textarea>文本域
     |----------+--------------------------|
     | 属性     |                          |
     | raws     | 指定文本域的行数（高度） |
     | cols     | 指定文本域的列数（宽度） |
     | readonly | 只读                     |
     | disabled | 禁用                     |
     |----------+--------------------------|
   - <select><option>
     |--------+-------------------------------------------------------------------------------|
     | 属性   |                                                                               |
     | select | 提供下拉选择功能                                                              |
     | option | 下拉选框中的选项可以用value属性指定提交的值，如果不指定，将会提交标签内的文本 |
     |--------+-------------------------------------------------------------------------------|

     |----------+----------------|
     | 重要属性 |                |
     | name     | 下拉列表的名称 |
     | disabled | 禁用下拉选框   |
     |----------+----------------|

     |---------------------+--------------------------------------------------------------------|
     | 其他属性            |                                                                    |
     | size                | 设置下拉选项中可见选项的个数                                       |
     | multiple            | 是否支持多选                                                       |
     | selected="selected" | 下拉框默认选中                                                     |
     | value="wuhan"       | option中传递参数的值如果不设置value,则默认传递option标签中间的内容 |
     |---------------------+--------------------------------------------------------------------|
** 3. 注册表单练习
   [[./image/img/zy.png]]

   #+BEGIN_SRC html
     <!DOCTYPE HTML>
     <html>
       <head>
         <meta http-equiv="content-type" content="text/heml";charset="GBK">
         <title>注册表单练习</title>
       </head>
       <body>
         <form action="http://localhost:8090" method="post">
           <table align="center" border="1px" cellpadding="7px" cellspacing="0px" borderColor="#FF1493" bgcolor="#F5DEB3">
             <caption>
               <h1><font color="#FF1493">注册表单</font></h1>
             </caption>
             <tr>
               <td>用户名:</td>
               <td><input type="text" name="username" /></td>
             </tr>
             <tr>
               <td>密码:</td>
               <td><input type="password" name="password1 /"></td>
             </tr>
             <tr>
               <td>确认密码:</td>
               <td><input type="password" name="password2" /></td>
             </tr>
             <tr>
               <td>昵称:</td>
               <td><input type="text" name="nickname" /></td>
             </tr>
             <tr>
               <td>邮箱:</td>
               <td><input type="text" name="email" /></td>
             </tr>
             <tr>
               <td>头像:</td>
               <td><input type="file" name="fx" /></td>
             </tr>
             <tr>
               <td>性别:</td>
               <td>
                 <input type="radio" name="gender" value="male" />男
                 <input type="radio" name="gender" value="female" />女
               </td>
             </tr>
             <tr>
               <td>爱好:</td>
               <td>
                 <input type="checkbox" name="like" value="eat" />吃饭
                 <input type="checkbox" name="like" value="sleep" />睡觉
                 <input type="checkbox" name="like" value="beat" />打豆豆
               </td>
             </tr>
             <tr>
               <td>
                 <select name="city">
                   <option value="bj">北京</option>
                   <option value="sh">上海</option>
                   <option value="gz">广州</option>
                   <option value="sz">深圳</option>
                   <option value="tl" selected="selected">铁岭</option>
                 </select>
               </td>
             </tr>
             <tr>
               <td>自我介绍:</td>
               <td>
                 <textarea name="desc" rows="5" cols="45">请描述个人描述!</textarea>
               </td>
             </tr>
             <tr>
               <td>验证码:</td>
               <td>
                 <input type="text" name="valistr" />
                 <img src="../image/img/2.gif" width="80px" height="18px" />
                 <input type="button" value="点我换一张"/>
               </td>
             </tr>
             <tr>
               <td colspan="2" align="center">
                 <input type="submit" value="提交"/>
                 <input type="reset" value="重置"/>
               </td>
             </tr>
           </table>
         </form>
       </body>
     </html>
   #+END_SRC
   [[./SourceCode/13.html]]
* CSS
** 1. 网页组织的两种常用方式
   - 表格套表格定义网页结构 -- 目前不只是主流，只在一些结构简单的页面中有所使用
   - DIV+CSS方式定义网页结构 -- 目前主流的网页开发方法，可以非常灵活的定义网页
** 2. 容器标签
   本身没有任何特殊的能力，最主要的功能是用来包含其他标签组成一个整体
   |----------------+----------+----------------------------------------------|
   | 常用的容器标签 |          |                                              |
   | <div>          | 块级元素 | 内容自动的开始一个新行                       |
   | <span>         | 行内元素 | 多个行内元素不会要求独占一行                 |
   | <p>            | 块级元素 | 声明一个段落，会在当前段落前后多出额外的空行 |
   |----------------+----------+----------------------------------------------|

   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
       <head>
         <meta http="equiv=Content-type" content="text/html" charset="UTF-8" />
         <title>div盒子模型</title>
       </head>
       <body>
         <div>我是div</div>
         <div>我是div</div>
         <p>我是一个p标签</p>
         <p>我是一个p标签</p>
         <span>我是一个span</span>
         <span>我是一个span</span>
         <span>我是一个span</span>
       </body>
     </html>

   #+END_SRC

** 3. CSS的概念
   层叠样式表：实现了网页中数据和样式的分离，是网页结构更加明晰，解决了样式重复定义的问题，提高了开发效率和后期代码的可维护性，另外还增强了网页的没画能力。
** 4. CSS的四种引入方式
   - 方式一：通过style属性指定元素的样式
     #+BEGIN_SRC html
       <p style="background-color:#FF0000; color:#FFFFFF">
         p标签段落内容
       </p>
     #+END_SRC
   - 方式二：通过<style>定义样式，可以在html的<hesd>标签中定义<style>标签，在其中为当前页面设定样式
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             div{
             color:#DDAA11;
             background:#FFAADD;
             }
           </style>
         </head>
         <body>
           <div>我是第一个div</div>
           <div>我是第二个div</div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/14.html]]
   - 方式三：引入外部样式文件，可以在html的<head>标签中定义<link>标签，引入外部的css文件来修饰当前页面
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <!--<style type="text/css">
               div{
               color:#DDAA11;
               background:#FFAADD;
               }
               </style>-->
           <link href="./14.css" rel="stylesheet" />
         </head>
         <body>
           <div>我是第一个div</div>
           <div>我是第二个div</div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/15.html]]
     #+BEGIN_SRC css
       div{
           color:#DDAA11;
           background:#FFAADD;
       }
     #+END_SRC
   - 方式四：可以通过@import url(xxx.css)在css的内部引入一个css文件钟定一的css样式片段。可以实现css代码的引入从而实现css代码的复用
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             @import url('./16.css');
           </style>
         </head>
         <body>
           <div>我是第一个div</div>
           <div>我是第二个div</div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/16.html]]
     #+BEGIN_SRC css
       div{
           color:#DDAA11;
           background:#FFAADD;
       }
     #+END_SRC
** 5. CSS引入顺序
   a. 样式引入的位置距离标签越近，就优先生效
   b. 样式修改选择器书写越具体，越优先生效
** 6. CSS基本选择器
   - 标签选择器
     通过html标签的名字来选择标签的选择器；标签名{}
     #+BEGIN_SRC css
       div{
       color:red;
       }
       ,*{
       color:red;
       }
     #+END_SRC
   - 类选择器
     html的所有标签都具有一个通用的属性叫做class,通过它可以为标签指定类名，通过类选择器可以选择指定类名的元素；.类名{}
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             #div1{
             color:#ABC123;
             background:#123ABC;
             }
             .class1{
             color:#DDC123;
             background:#12FFBC;
             }
           </style>
         </head>
         <body>
           <div id="div1">我是第一个div</div>
           <div id="div2" class="class1">我是第二个div</div>
           <div>我是一个div</div>
           <span class="class1">我是一个span</span>
           <span>我是一个span</span>
           <span>我是一个span</span>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/18.html]]
   - id选择器
     html的所有标签都具有一个通用的属性叫做id，通过它可以为标签指定id，id必须在整个html中唯一，通过id选择器可以选择出指定id的元素；#id{}
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             @import url('./17.css');
             #div1{
             color:#ABC123;
             background:#123ABC;
             }
             #div2{
             color:#CDA124;
             background:#124CDA;
             }
           </style>
         </head>
         <body>
           <div id="div1">我是第一个div</div>
           <div id="div2">我是第二个div</div>
           <div>我是一个div</div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/17.html]]
** 7. CSS扩展选择器
   - 后代选择器
     选择父元素中的后代元素；父元素选择器 后代元素选择器{}
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             div span{
             color:#DDAA11;
             background:#FFAADD;
             }
           </style>
         </head>
         <body>
           <div id="div1">我是父级div
             <span class="test">我是div儿子span1</span>
             <span class="test">我是div儿子span2</span>
             <p>
               <span class="test">我是p儿子span3</span>
             </p>
           </div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/19.html]]
   - 子元素选择器
     选择父元素中的子元素；父元素选择器>子元素的选择器{}
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             div>span{
             color:#DDAA11;
             background:#FFAADD;
             }
           </style>
         </head>
         <body>
           <div id="div1">我是父级div
             <span class="test">我是div儿子span1</span>
             <span class="test">我是div儿子span2</span>
             <p>
               <span class="test">我是p儿子span3</span>
             </p>
           </div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/20.html]]
   - 相邻兄弟选择器
     选择选择器选择到的元素的相邻的兄弟元素
     选择器+兄弟元素名{}
     #+BEGIN_SRC html
       <!DOCtype html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
           <title>div盒子模型+css层叠样式表</title>
           <style type="text/css">
             div+span{
             color:#DDAA11;
             background:#FFAADD;
             }
           </style>
         </head>
         <body>
           <div id="div1">我是父级div
             <div id="test" class="test">
               我是儿子div
             </div>
             <span class="test">我是div儿子span1</span>
             <span class="test">我是div儿子span2</span>
             <p>
               <span class="test">我是p儿子span3</span>
             </p>
           </div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/21.html]]
   - 属性选择器
     选择具有指定属性，或指定属性的值等于指定值的选择器；
     1. 选择器[属性名]{}
        div[name]{}
        #+BEGIN_SRC html
          <!DOCtype html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
              <title>div盒子模型+css层叠样式表</title>
              <style type="text/css">
                div[name]{
                color:#DDAA11;
                background:#FFAADD;
                }
              </style>
            </head>
            <body>
              <div id="div1">我是父级div
                <div id="test" class="test" name="ll">
                  我是儿子div
                </div>
                <span class="test">我是div儿子span1</span>
                <span class="test">我是div儿子span2</span>
                <p>
                  <span class="test">我是p儿子span3</span>
                </p>
              </div>
              <div idi="test" class="test" name="ll">
                单独div
              </div>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/22.html]]
     2. 选择器[属性名='属性值']{}
        div[name='ll']{}
        #+BEGIN_SRC html
          <!DOCtype html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
              <title>div盒子模型+css层叠样式表</title>
              <style type="text/css">
                div[name='ll']{
                color:#DDAA11;
                background:#FFAADD;
                }
              </style>
            </head>
            <body>
              <div id="div1">我是父级div
                <div id="test" class="test" name="ll">
                  我是儿子div
                </div>
                <span class="test">我是div儿子span1</span>
                <span class="test">我是div儿子span2</span>
                <p>
                  <span class="test">我是p儿子span3</span>
                </p>
              </div>
              <div idi="test" class="test" name="ll">
                单独div
              </div>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/23.html]]

     如果希望把包含属性(tittile)的所有元素变为红色，可以写作：
     #+BEGIN_SRC html
       ,*[tittle]{color:red;}
     #+END_SRC
     与上面类似，可以只对有href属性的锚（a元素）应用样式：
     #+BEGIN_SRC html
       a[href][tittle]{color:red;}
     #+END_SRC
     为了将同时有href和title属性的HTML超链接的文本设置为红色，可以这样写：
     #+BEGIN_SRC html
       a[href][title]{color:red;}
     #+END_SRC
     假设只希望选择moons属性值为1的那些planet元素：
     #+BEGIN_SRC html
       planet[moons="1"]{color:red;}
     #+END_SRC
     上面的代码会把一下标记中的第二个元素编程红色，但第一个和第三个元素不受影响：
     #+BEGIN_SRC html
       <planet>Venus</planet>
       <planet moons="1">Earth</planet>
       <planet moons="2">Mars</planet>
     #+END_SRC
   - 分组选择器
     将多个选择器的选择结果进行一个或的操作;选择器1，选择器2...{}
     #+BEGIN_SRC html
       p,div{color:#FF0000;}
       <p>P标签显示段落</p>
       <div>DIV标签显示段落</div>
     #+END_SRC
     + 注：读个不同选择器要用都好分隔开
        #+END_SRC
   - 伪元素选择器
     其实就在html中预先定义好的一些选择器，成为伪元素。是因为CSS的术语
     |----------+------------------------------------------|
     | :link    | 未点击的状态                             |
     | :visited | 被点击的状态                             |
     | :hover   | 鼠标移动到元素之上，但是仍然未点击的状态 |
     | :active  | 被鼠标点击着的状态                       |
     |----------+------------------------------------------|
     + 注：在不设置visited状态时active生效，否则会出现visited覆盖active效果

       #+BEGIN_SRC html
         <!DOCtype html>
         <html>
           <head>
             <meta http-equiv="Content-type" content="text/html" charset="UTF-8" />
             <title>div盒子模型+css层叠样式表</title>
             <style type="text/css">
               a:link{
               color:#DDAA11;
               background:#FFAADD;
               }
               a:visited{
               color:#AABB21;
               background:#FDFADD;
               }
               a:hover{
               color:#AFFB21;
               background:#AAFADD;
               }
               a:active{
               color:#BBFF21;
               background:#BBFADD;
               }
               div:hover{
               color:#AFFB21;
               background:#AAFADD;
               }
             </style>
           </head>
           <body>
             <div id="div1">我是父级div
               <div id="test" class="test" name="ll">
                 我是儿子div
               </div>
               <span class="test">我是div儿子span1</span>
               <span class="test">我是div儿子span2</span>
               <p>
                 <span class="test">我是p儿子span3</span>
               </p>
             </div>
             <div idi="test" class="test" name="ll">
               单独div
             </div>
             <a href="#">点击跳转</a>
           </body>
         </html>
       #+END_SRC
       [[./SourceCode/24.html]]
** 8. 拓展：CSS中的常用属性简介
* JavaScript
** 1. js概述
   - 基于对象的一门语言
   - 一门独立的语言
   - 脚本语言，没有编译过程，解释运行
   - 主要应用在客户端，在服务器也有应用（node.js）
   - 特点：
     1. 脚本语言没有编译过程
     2. 基于对象
     3. 弱类型
   - 特性
     1. 交互性
     2. 安全性
     3. 跨平台性
** 2. JavaScript不得不说的历史
   - 和java的关系：语法十分相似，但毫无关系
   - 1995年5月，Netscape，LiveScript
   - 1995年12月，改名为JavaScript
   - 1996年8月，微软，Jscript
   - 1997-1999年，ECMA，ECMAScript，基于已有的JavaScript和Jscript，提出了标准的Script语法规则，JavaScript和Jscript都遵循这套标准
** 3. js和html的结合
   - 引入方式
     1. 将javascript书写在head标签当中，书写格式如下：
        <script type = "text/javascript"></script>
        #+BEGIN_SRC html
          <!DOCTYPE heml>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
              <title>js引入</title>
              <!--js引入方式一:-->
              <script type="text/javascript">
                alert("aaaa");
                console.log("aaa");
              </script>
            </head>
            <body>
            </body>
          </html>
         #+END_SRC
        [[./SourceCode/25.html]]
     2. 单独写一个js文件，然后导入
        #+BEGIN_SRC html
          <!DOCTYPE heml>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
              <title>js引入</title>
              <!--js引入方式一:-->
              <script type="text/javascript">
                alert("aaaa");
                alert("bbbb");
                alert("cccc");
                console.log("aaa");
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/26.html]]
   - 浏览器中内置一个js解析器，会对浏览器加载到的js语句逐行执行，如果当前js语句没有添加分号，则js解析器会自动拼接上一个分号。注意：在这里建议大家手动添加分号，避免以后js语言和java语言相互切换使用的时候出现一些不必要的错误
   - 浏览器中内置的js解析器会逐行执行js代码，如果代码中书写有错误，则会导致js代码失效，可能全部的js代码效果无法正常执行
   - script标签必须要书写成一个标签对，不可以写成一个自闭标签。如果写成一个自闭标签则会导致标签中的js代码无法正常执行
** 4. console.log使用：
   - 在script标签中添加console.log()语句，在括号中间可以添加要输出的数据，这些数据会最终显示在浏览器控制台中
** 5. js的语法-数据类型
   KS中的数据类型分为基本数据类型和复杂数据类型
   - 基本数据类型：共五种
     数值类型（Number）、字符串（String）、布尔类型（Boolean）、undefined、null
     1. Number数值型
        不仅是一个数据类型，还是js的一个包装对象
        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js基本数据类型</title>
              <script type="text/javascript">
                //1.Number
                console.log(Number.MAX_VALUE);
                console.log(Number.MIN_VALUE);
                console.log(Number.POSITIVE_INFINITY);
                console.log(Number.NEGATIVE_INFINITY);
                console.log(Infinity);
                console.log(-Infinity);
                console.log(NaN==NaN);
                console.log(NaN=="abc");
                console.log(NaN==123));
                console.log(isNaN(123);
                console.log(isNaN("abc"));
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/27.html]]
        - 数值类型中有如下几个特殊值
          + Infinity无穷大
            -Infinity负无穷大
        - NaN非数字，非数字非常特殊，和任何职都不相等，包括自身，即NaN==NaN的值为false。可以通过isNaN()判断某值是否为数字，true彪啊是确实为非数字的值，false表示为数字的值
        - 数值类型是基本数据类型，但JS本身提供了对应的包装对象Number，具有和数值处理相关的属性和方法
          - Number提供的属性
            + Number.MAX_VALUE可表示最大数字
            + Number.MIN_VALUE可表示的最小数字
            + Number.NaN非数字值
            + Number.POSITIVE_INFINITY正无穷大
            + Number.NEGATIVE_INFINITY负无穷大
        - 方法：查阅API文档
     2. String字符串类型
        String表示的数据必须使用双引号包含，这样才表示当前值为一个字符串
        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js基本数据类型</title>
              <script type="text/javascript">
                //1.Number
                console.log(Number.MAX_VALUE);
                console.log(Number.MIN_VALUE);
                console.log(Number.POSITIVE_INFINITY);
                console.log(Number.NEGATIVE_INFINITY);
                console.log(Infinity);
                console.log(-Infinity);
                console.log(NaN==NaN);
                console.log(NaN=="abc");
                console.log(NaN==123));
                console.log(isNaN(123);
                console.log(isNaN("abc"));
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./Sourcecode/28.html]]
        - Js中的字符串是基本数据类型，字符串常量必须用双引号引起来。
        - Js中提供了字符串的包装对象String，提供了字符串处理相关的属性和方法
          + String对象提供的属性
            length：字符串中字符数
          + String独享提供的方法：
            参考JS文档
        - 方法：查阅API文档
     3. Boolean
        Boolean类型只有两个值，true、false。Js中提供布尔类型的包装对象Boolean，提供了布尔类型处理的相关属性和方法

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js基本数据类型</title>
              <script type="text/javascript">
                //3. boolean
                console.log(true || false);//true
                console.log(true && false);//false
                console.log(true | false);//1
                console.log(true & false);//0
                console.log(!true);//false
              </script>
            </head>
            <body>
            </body>
          </html>

        #+END_SRC
        [[./Sourcecode/29.html]]
        - ||
        - &&
        - +
        - &
     4. Undefined
        Undefined类型只有一个值就是undefined，表示变量未定义，当一个变量未初始化时，值为undefined
        var a;console.log(a);//undefined
     5. Null
        类型中值包含null一个值，这个值表示一个不存在值。常用作返回值使用。

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js基本数据类型</title>
              <script type="text/javascript">
                //undefined
                console.log(null == undefined);
                console.log(null === undefined);
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./Sourcecode/30.html]]
   - 复杂数据类型
     对象、数组、函数
     + js中数据类型的自动转化
       [[./Img/3.png]]
       js在需要时会自动对类型进行转换，转换的规则：
       1. 数字：
          可以在需要时转换为对应的字符串形式，0会转换为false，其他数字会转换为true，在需要对象时可以自动转换为Number对象
       2. 字符串：
          可以在需要时转换为对应的数值，需要注意当数值和字符串进行加法运算时，会处理为字符串的拼接，所以需要通过parseInt或parseFolat将字符串强制转换为数值类型参与运算，非空字符串转换为true，空字符串转换为false，需要对象时自动转换为String对象
       3. 布尔类型：
          true转换为1，false转换为0，转换为字符串的true和false转换为boolean对象
       4. 对象类型：
          如果位null则转成字符串null，如果为null转换为false

          #+BEGIN_SRC html
            <!DOCTYPE html>
            <html>
              <head>
                <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
                <title>js数据类型自动转换</title>
                <script type="text/javascript">
                  console.log(1+"2");//12
                  console.log(true+"2");//true2
                </script>
              </head>
              <body>
              </body>
            </html>
          #+END_SRC
          [[./SourceCode/31.html]]
** 6. Js语法--运算符
   JavaScript中的运算符和Java大致相同
   只是运算过程中需要注意几点：
   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
       <head>
         <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
         <title>js语法运算符</title>
         <script type="text/javascript">
           console.log(1+2);
           console.log(2-1);//1
           console.log(21-"1");
           console.log(3/2);//1.5
           console.log(3/2*1000);//1500
           //console.log(2.3+1.3);//3.599999999999996
           var x = 3;
           var y = "123";
           var z = false;
           typeof(x);//number
           typeof(y);//string
           typeof(z);//boolean
         </script>
       </head>
       <body>
       </body>
     </html>
   #+END_SRC
   [[./SourceCode/32.html]]
   - 加好对于字符串是连接符
   - &&||是逻辑运算符&|是位运算符
   - 也支持三元运算符?:
     2+3>5?console.log("aaa"):console.log("bbb")
   - 特殊运算符typeof:返回一个操作表达式的数据类型的字符串
** 7. 定义变量
   - 使用关键字var来定义变量
     使用var定义的变量是没有数据类型的
     Js中有数据类型，但是Js的引用不区分类型的，所以称JS为弱类型，即一个引用可以先指向数字类型，后在指向对象类型，如下的代码是没有问题的
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <title>js语句</title>
           <script type="text/javascript">
             var a = 1;
             a = "abc";
             a = true;
             a = new Object();
             console.log(a);
           </script>
         </head>
         <body>
         </body>
       </html>

     #+END_SRC
     [[./SourceCode/34.html]]
   - 局部变量和全局变量
     JS中定义对象的时候可以不使用var来定义，这样定义的变量将成为全局变量，在任何一个位置都可以使用
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <title>js语句</title>
           <script type="text/javascript">
             function mx(){
             x = 4;
             }
             mx();
             console.log(x);
           </script>
         </head>
         <body>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/35.html]]
     + 全局变量
       x = 4;
     + 局部变量
       var x = 4;
** 8. js语法--语句
   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
       <head>
         <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
         <title>js语句</title>
         <script type="text/javascript">
           var x=5;
           if(4==x){
           console.log("正确");
           }else{
           console.log("错误");
           }
         </script>
       </head>
       <body>
       </body>
     </html>

   #+END_SRC
   如果在if判断中只有一个等号，则，执行的操作为，先赋值，再运算的操作。操作过程为：先将x赋值为4，再判断if(x)，也就是if(4),即if(true),所以只会打印为true的部分代码。

   - if语句：
     var x = 3;
     + 情况一：if(x==4)//可以进行比较运算
     + 情况二：if(x=4)//可以进行赋值运算，而且可以痛仰进行判断，不报错
       原因；因为在js中0或者null就是false，非0或者非null就是true。if(x=4)是先将x赋值为4，然后对值为4的x进行判断，4会被认为是true，所以结果是true。
       + 可以通过if(4==y)来解决该问题，因为4=y不会进行判断，而是会报错
   - switch case
     与java 中使用方式一致
   - while、dowhile、for
     不支持增强for循环，与java中使用方式一致
** 9. js语法--函数
    1. js中的函数是一堆可执行代码的合集。在需要的时候可以通过函数的名字调用其中的代码。函数可以理解为一种特殊的对象，其实本质上就是一段可执行的字符串
    2.  在函数中哟一个隐藏的属性arguments，其中保存的是用户输入的全部参数，可以通过arguments.length获取用户输入参数的长度。如果用户输入的参数数量大于函数现有的参数长度，多余的参数没有被抛弃，利用arguments依然可以获取用户输入全部参数。如果用户的输入参数数量小于函数现有的参数长度，则缺少的参数会使用undefined来赋值，通过arguments也可以获取用户传入的参数。
    3. 在js的函数中可以认为函数是一个特殊的变量，这个变量可以作为参数使用，可以作为方法使用。作为参数使用时，直接书写方法名即可，这时书写的方法名就是代表当前方法的变量。作为方法使用，则需要在方法名之后添加上一对小括号，这时这个函数就会执行函数中的函数体。
    4. 函数的定义
       + 方法一：普通方法定义函数
        #+BEGIN_SRC js
          function fun1(参数列表){
            函数体
          }
        #+END_SRC

       #+BEGIN_SRC html
         <!DOCTYPE html>
         <html>
           <head>
             <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
             <title>js语句</title>
             <script type="text/javascript">
               function mx(a,b){
                   //return a+b;
                   for(var i=0;i<arguments.length;i++){
                       console.log(arguments[i]);
                   }
               }

               /*console.log(mx(1,2));
               //在参数列表输入比定义函数时更多的参数，函数依然可以正常执行
               console.log(mx(1,2,3));
               console.log(mx(1));*/
               mx(1,2);
             </script>
           </head>
           <body>
           </body>
         </html>

       #+END_SRC
       + 方法二：动态函数
         动态函数定义方式，参数列表中先书写全部参数，最后一个参数需要书写方法体。（动态函数最后一个参数位置是填写方法体的位置）
         #+BEGIN_SRC js
         var fun2 = nuew Function("a","b","方法体");
         fun2("x","y")
         var fun2x = fun1();
         fun2x("t","u");
         #+END_SRC

         #+BEGIN_SRC html
         <!DOCTYPE html>
         <html>
           <head>
             <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
             <title>js语句</title>
             <script type="text/javascript">
               var mx = new Function("a","b","return a+b");
               console.log(mx(2,3));
             </script>
           </head>
           <body>
           </body>
         </html>
         #+END_SRC
         [[./SourceCode/37.html]]
        + 方法三：匿名函数定义
         #+BEGIN_SRC js
         var fun3 = function(参数列表){
           方法体
         }
         fun3();
         #+END_SRC

         #+BEGIN_SRC html
         <!DOCTYPE html>
         <html>
           <head>
             <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
             <title>js语句</title>
             <script type="text/javascript">
               var mx = function(a,b){
               return a+b;
               }
               console.log(mx(3,4));
             </script>
           </head>
           <body>
           </body>
         </html>

         #+END_SRC
         [[./SourceCode/38.html]]
    5. 案例

      #+BEGIN_SRC html
        <!DOCTYPE html>
        <html>
          <head>
            <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
            <title>js函数</title>
            <script type="text/javascript">
              function eat(food){
                  if("羊肉串"==food){
                      return "烤"+food;
                  }else if("煎饼"==food){
                      return "摊"+food;
                  }
              }
              console.log(eat("煎饼"));
            </script>
          </head>
          <body>
          </body>
        </html>


      #+END_SRC
      [[./SourceCode/39.html]]
      #+BEGIN_SRC html
        <!DOCTYPE html>
        <html>
          <head>
            <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
            <title>js函数</title>
            <script type="text/javascript">
              function meau(e,food){
                food = e(food);
                return "吃"+food;
              }
              function eat(food){
                  if("羊肉串"==food){
                      return "烤"+food;
                  }else if("煎饼"==food){
                      return "摊"+food;
                  }
              }
              console.log(meau(eat,"羊肉串"));
            </script>
          </head>
          <body>
          </body>
        </html>
      #+END_SRC
      [[./SourceCode/40.html]]
** 10. js语法--数组
    js中的数组，本质上就是一个用中括号括起来用逗号分割内容的字符串
    #+BEGIN_SRC js
      var arr = new Array();//定义一个长度为0的空数组
      var arr = new Array(3);//定义一个长度为3的数组
      var arr = new Array(1,2,4,6,8);//定义具有指定初始值的数组
      var arr = [2,3,5,7];//数组直接量定义数组

    #+END_SRC

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
          <title>js数组</title>
          <script type="text/javascript">
            var arr = new Array();
            arr[0] = 1;
            arr[0] = 1;
            arr[1] = 2;
            arr[999] = 3;
            console.log(arr);
          </script>
        </head>
        <body>
        </body>
      </html>
    #+END_SRC
    [[./SourceCode/41.html]]

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
          <title>js数组</title>
          <script type="text/javascript">
            var arr = new Array(3);
            arr[0]=1;
            arr[1]=2;
            arr[2]="aaa";
            arr[999]=true;
            console.log(arr);
          </script>
        </head>
        <body>
        </body>
      </html>
    #+END_SRC
    [[./SourceCode/42.html]]

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
          <title>js数组</title>
          <script type="text/javascript">
            var arr = new Array(1,"a",true,new Object());
            console.log(arr);
            arr[4]="b";
            console.log(arr);
          </script>
        </head>
        <body>
        </body>
      </html>
    #+END_SRC
    [[./SourceCode/43.html]]

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
          <title>js数组</title>
          <script type="text/javascript">
            var arr = [2,"c",true,false,new Object()];
            console.log(arr);
            arr[999]=0;
            console.log(arr);
            arr.push(2);
            console.log(arr);
            var r = arr.pop();
            console.log(r);
            console.log(arr);
            var s = arr.shift();
            console.log(s);
            console.log(arr);
            for(var i=0;i<arr.length;i++){
              console.log(arr[i]);
            }
          </script>
        </head>
        <body>
        </body>
      </html>
    #+END_SRC
    - 特点：
      1. 数组存储的元素类型是任意的
      2. 长度可以是任意的
    - 案例：
      1. 添加元素push()
      2. 删除最后一个元素pop()
      3. 删除第一个元素shift()
      4. 遍历打印数组
** 10. js语法-对象
    - js的内置对象
      #+BEGIN_SRC html
        <!DOCTYPE html>
        <html>
          <head>
            <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
            <title>js对象</title>
            <script type="text/javascript">
              console.log(Math.random()*10);
              console.log(Math.floor(3.4));
              console.log(Math.ceil(3.4));
              console.log(Math.round(3.4));
              var date = new Date();
              console.log(date.toLocaleString());
              console.log(parseInt("123"));
              //解释执行js语句
              eval(alert("aaa"));
              //RegExp正则对象
              var reg = /^\w+@\w+(\.\w+)+$/;
              var reg1 = new RegExp("\\w+@\\w+(\\.\\w+)+");
              var email = "lishuai@tedu.cn";
              console.log(reg.test(email));
              console.log(reg1.test(email));
            </script>
          </head>
          <body>
          </body>
        </html>
      #+END_SRC
      [[./SourceCode/45.html]]
      1. String--基本数据类型，字符串类型的包装对象
      2. Boolean--基本数据类型，布尔类型的包装对象
      3. Number--基本数据类型，数值类型的包装对象
      4. Array--数组类型的包装对象
      5. Math--数据对象，封装了很多数学常量和数学方法
      6. Date--日期时间对象，封装了很多和日期实现相关的方法
      7. Global--全局对象，js中有一些方法和属性经常使用，但归到哪个对象上都不合适，所以js中有一个Global对象整合了这些方法和属性。Global中定义的方法和属性特点是属于全局，可以直接使用
         + 思考：parseInt("123abc123");打印结果
      8. RegExp--正则对象，保存有关正则表达式模式匹配信息的固有全局对象。Partten邮箱正则
    - 自定义对象
      js中对象的本质就是一个大括号，其中包含任意多个键值对，键值对直接使用逗号隔开，这种形式组成的字符串就是对象。所以对象的本质也是一个字符串
      构造函数模拟了Java中类的功能，js中的对象可以动态增加/删除属性和函数。--js对象的本质就是用大括号起来的键值的集合，本质是一段字符串，有点类似于java中的map。
      + 方法一：构造函数创建对象1
        #+BEGIN_SRC js
          function Person(){}
          var p = new Person();
          p.name = "zhangfei";
          p.age = 19;
          p.say = function(){alert(this.name+"say...")};
          alert(p.name);
          alert(p["age"]);
          p.say();
          //删除一个属性
          delete p.name
          console.log(p);
          //删除一个函数
          delete p.say
          console.log(p);
        #+END_SRC

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js对象</title>
              <script type="text/javascript">
                function Person(){
                }
                var p = new Person();
                p.name="ls";
                p.age=18;
                p.gender="male";
                p.say = function(){
                  return this.name+"say...";
                }
                console.log(p);
                console.log(p.say());
                delete p.name;
                console.log(p);
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/46.html]]
      + 方法二：构造函数构造对象2
        #+BEGIN_SRC js
          function Person(name,age){
            this.name = name;
            this.age = age;
            this.say = function(){alert(this.name+"say....")}
          }
          var p = new Person("guanyu",20);
          alert(p.name);
          alert(p["age"]);
          p.say();
        #+END_SRC

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js对象</title>
              <script type="text/javascript">
                function Person(name,age){
                  this.name=name;
                  this.age=age;
                }
                var p = new Person("ls",18);
                p.addr="bj";
                delete p.name;
                console.log(p);
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/47.html]]
      + 方法三：对象直接量定义对象
        #+BEGIN_SRC js
          var p = {name:"liubei",age:19,sleep:function(){alert(this.name+"sleep....")}};
          alert(p.name);
          alert(p["name"]);
          p.sleep();

        #+END_SRC

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js对象</title>
              <script type="text/javascript">
                function Person(name,age){
                  this.name=name;
                  this.age=age;
                }
                var p = new Person("ls",18);
                p.addr="bj";
                delete p.name;
                console.log(p);
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/48.html]]

        #+BEGIN_SRC html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
              <title>js对象</title>
              <script type="text/javascript">
                var data = {
                  name:"pq",
                  age:18,
                  addr:"bj",
                  girlfriends:[
                    {name:"dc",age:16,job:"sbd"},
                    {name:"xs",age:18,job:"sdfg"}
                  ]
                }
                console.log(data["girlfriends"][1]["job"]);
              </script>
            </head>
            <body>
            </body>
          </html>
        #+END_SRC
        [[./SourceCode/49.html]]
    - 对象操作
      1. with语句：with语句定义了某个对象的作用域，在该域中可以直接调用该对象的成员

         #+BEGIN_SRC js
           var p = {name:"liubei",age:19,sleep:function(){alert(this.name+"sleep....")}};
           with(p){
             alert(name);
             alert(age);
             sleep();
           }
         #+END_SRC
      2. for...in语句：用来遍历对象的所有属性的名称

         #+BEGIN_SRC js
           var p = {name:"liubei",age:19,sleep:function(){alert(this.name+"sleep....")}};
           for(var x in p){
             alert(x);
           }
         #+END_SRC
      3. delete语句：删除对象的属性

         #+BEGIN_SRC js
           var p = {name:"liubei",age:19}
           p.addr = "peixian";
           alert(p.addr);
           delete p.addr;
           alert(p.addr);
         #+END_SRC
** 11. JSON
    JSON本质上就是一段字符串，能够保存较复杂关系的数据，具有良好的数据保存格式，又极为轻量，加之多种代码平台都支持对字符串的处理，所以我们可以使用JSON字符串进行数据的传入，甚至跨平台传输

    #+BEGIN_SRC js
      data = {
        name:"zs",
        age:19,
        addr:["bj,sh,gz"],
        wife:[
          {name:"苏权",age:40,job:["教主夫人","大大老婆"]},
          {name:"建宁",age:20,job:["公主","小老婆"]},
        ]
      }
    #+END_SRC
    查看当前JSON中第二个wife的工作data["wife"][1]["job"];
* DHTML-动态html
** 1. DHTML概述
   - DHTML将浏览器加载html文档中的所有的内容当做js对象来处理，最终就组成了一颗由js对象组成的对象树
   - 通过操作代表html元素的js对象来操作html中的元素
   - 通过操作js对象组成树来操作html文档的结构。从而实现了html和js的结合，实现了可以通过js来操作html
   - DHTML可以分为由BOM(Browser Object Model)和DOM(Document Object Model)两个部分组成
   - 可以对节点进行增删改的操作
** 2. BOM和DOM
   [[./Img/2.png]]
** 3. BOM--浏览器对象模型
   bom--browser object model
   - window：代表一个浏览器窗口的对象
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <title>js对象</title>
           <script type="text/javascript">
             /*window.onblur=function(){
               alert(123);
               }*/
             /*window.onfocus=function(){
               alert(321);
               }*/
             /*window.onload=function(){
               var div = document.getElementById("test");
               div.innerText="bbb";
               }*/
             /*var flag = window.confirm("是否下课？");
             if(flag){
               alert("快点下课");
             }else{
               alert("一会下课");
               }*/
             /*var password=window.prompt("请输入密码");
             if(password="007"){
               alert("密码正确，立即爆炸");
             }else{
               alert("密码错误，哈市爆炸");
               }*/
             //window.clase();
             /*window.setInterval(function(){
               var div = document.getElementById("test");
               var date = new Date();
               var time = date.toLocaleString();
               div.innerText = ;
               },1000);*/
             window.setTimeout(function(){
               var div = document.getElementById("test");
               div.innerText = "time out!";
             },3000);
           </script>
         </head>
         <body>
           <div id="test" class="test">
             waiting...
           </div>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/50.html]]
     + 其中包含的方法：
       1. onblur:失去焦点
       2. onfocus：获得焦点
       3. !!!onload：当前浏览器页面装载完成后触发
       4. !!!alert
       5. !!!confirm
       6. !!!prompt
       7. !!!close(仅限ie浏览器，chrome和firefox需要解决浏览器禁止js关闭非js创建页面的问题)
       8. !!!setInterval
       9. !!!setTimeout
       10. setInterval和setTimeout的不同?
     + 其中包含的对象：（我们可以通过window引出这些对象）
       1. location
       2. screen
       3. history
       4. navigator
       5. document
   - location
     !!!href：获取或设置地址栏上的地址。通过此属性js可以控制浏览器访问一个新的地址
   - navigator
   - history
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <title>js对象</title>
           <script type="text/javascript">
             /*function back(){
             window.history.back();
             }
             function forward(){
             window.history.forward();
             }*/
             function back(){
             window.history.go(-1);
             }
             function forward(){
             window.history.go(1);
             }
             console.lot(window.history.length);
           </script>
         </head>
         <body>
           <div id="test" class="test">
             waiting...
           </div>
           <input type="button" onclick="back()" value="后退" />
           <input type="button" onclick="forward()" value="前进" />
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/51.html]]
     1. length
     2. back()
     3. forward()
     4. go()
** 4. DOM--文档对象模型
   dom--document object model
   - 获取文档独享的方法
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
         <head>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <title>如何通过document获取数据</title>
           <script type="text/javascript">
             function demo1(){
               //根据ID获取username文本中的值
               var username = document.getElementById("username");
               //获取当前对象的value值
               alert(username.value);
             }
             function demo2(){
               //根据name获取input的对象
               var password = document.getElementsByName("password");
               //获取其中的value值
               //因为getElementsByName获取两个对象，这两个对象存储在一个数组中，如果需要取出每一个对象的value值，可以使用for遍历来操作
               for(var i=0;i<password.length;i++){
                 alert(password[i].value);
               }
             }
             function demo3(){
               //根据tagname(元素名)获取页面中的元素
               arr_input = document.getElementsByTagName("input");
               //获取元素的value值
               //利用for循环遍历输出每一个input元素的value值
               for(var i=0;i<arr_input.length;i++){
                 alert(arr_input[i].value);
               }
             }
             function demo4(){
               //获取页面中的p元素
               var p = document.getElementById("pid");
               //获取p元素中的文本内容
               alert(p.innerText);
               //设置p元素中的文本内容
               //p.innerText = "10点多了";
               p.innerHTML="<font color='red'>10点多了</font>";
             }
           </script>
         </head>
         <body>
           用户名称：<input type="text" name="username" id="username"/><br />
           用户密码：<input type="password" name="password" id="password" /><br />
           用户密码2：<input type="password" name="password" id="password2" /><br />

           <hr />
           <input type="button" value="通过ID获取节点的值" onclick="demo1()"/>
           <input type="button" value="通过NAME获取节点的值"  onclick="demo2()" />
           <input type="button" value="通过TAG获取节点的值" onclick="demo3()" />

           <hr  />
           <p id="pid"><font color="red">获取P标签中的文字</font></p>
           <input type="button" value="获取P中文字" onclick="demo4()" />
         </body>
       </html>
     #+END_SRC

     1. getElementByld("id"):根据id获取一个元素
     2. getElementsByName("name")：根据name获取一组元素
     3. getElementsByTagName("tagname")根据元素名称获取一组元素
     4. innerHTML()：设置或获取位于对象起始和结束标签内的HTML
     5. innerText()：设置或获取位于对象起始或结束标签内的文本
   - 对文档对象进行增删改查的操作
     #+BEGIN_SRC html
       <html>
         <head>
           <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

           <title>节点的增删改查</title>
           <!--加入样式表-->
           <style type="text/css">
             div {
                 border:#0099FF 1px solid;
                 height:60px;
                 width:120px;
                 margin:20px 0px 20px 20px;
                 padding:10px 0px 0px 20px;
             }

             #div_1{
                 background-color:#00FFFF;
             }

             #div_2{
                 background-color:#FF3399;
             }

             #div_3{
                 background-color:#0000FF;
             }

             #div_4{
                 background-color:#FFFF66;
             }
           </style>

           <script type="text/javascript">
             function addNode(){
               /*
               //创建节点
               var new_div=document.createDlement("div");
               //添加节点（挂载）--将新节点挂载到父节点身上
               //1.获取父节点
               var parent = document.getElementByTagName("body")[0];
               //2.挂载
               parentNode.appendChild(new_div);*/

               //将新节点插入到旧节点之前
               //1.获取父节点
               var parent = document.getElementsByTagName("body")[0];
               //2.获取旧节点
               var div_4=document.getElementById("div_4");
               //3.创建新节点
               var new_div = document.createElement("div");
               //4.根据父节点在旧节点之前插入新节点
               parent.insertBefore(new_div,div_4);
             }
             function deleteNode(){
               //1. 获取要删除的节点
               var div_3 = document.getElementById("div_3");
               //2. 获取父节点
               var parent = document.getElementsByTagName("body")[0];
               //3. 将在节点从父节点身上删除
               parent.removeChild(div_3);
             }
             function updateNode(){
               //1. 获取父节点
               var parent = document.getElementsByTagName("body")[0];
               //2. 获取要被替换的旧节点
               var div_2=document.getElementById("div_2");
               //3. 创建一个新的节点
               var new_div=document.createElement("div");
               //4. 替换旧节点
               parent.replaceChild(new_div,div_2);
             }
             function copyNode(){
               //1. 获取一个节点
               var div_4=document.getElementById("div_4");
               //2.克隆
               var new_div=div_4.cloneNode(false);
               //3. 将克隆好的对象添加到js文档树中
               var parent=document.getElementsByTagName("body")[0];
               parent.appendChild(new_div);
             }
           </script>
         </head>
         <body>
           <div id="div_1">

           </div>

           <div id="div_2">
             div区域2
           </div>

           <div id="div_3">
             div区域3
           </div>

           <div id="div_4">
             div区域4
           </div>

           <hr />
           <input type="button" value="创建并添加节点" onclick="addNode()" />
           <input type="button" value="删除节点" onclick="deleteNode()" />
           <input type="button" value="替换节点" onclick="updateNode()" />
           <input type="button" value="克隆节点" onclick="copyNode()" />

         </body>
       </html>
     #+END_SRC
     [[./SourceCode/54.html]]

     #+BEGIN_SRC html
       <html>
         <head>
           <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
           <title>好友列表</title>
           <style type="text/css">
             table {
                 border:#0099FF 1px solid;
                 width:100px;
                 border-collapse:collapse;
             }
             table td{
                 border:#0066FF 1px solid;
                 background-color:#FF9900;
                 text-align:center;
             }
             table td div {
                 background-color:#FFFF99;
                 text-align:left;
             }
             table td a:link, table td a:visited {
                 color:#00ffFF;
                 text-decoration:none;
             }
             table td a:hover {
                 color:#00CC00;
             }

             /*
       使用display属性:如果取值为none就是隐藏标签。
            ,*/
             table td div {
                 display:none;
             }
             .open {
                 display:block;
             }
             .close {
                 display:none;
             }
           </style>
           <script type="text/javascript">
             function openDiv(thisobj){
               //1.点击a变迁展示div
               //找到a标签兄弟标签div
               //调用一个nextSibling获取到的是一个空格，再次调用nextSibling才是div对象
               var div = thisobj.nextSibling.nextSibling;
               //当前点击的div做出display的修改，而其他div全部关闭
               //找到全部的div，判断其中不是点击的div，然后将这些div全部关闭
               var divs = document.getElementsByTagName("div");
               for(var i=0;i<divs.length;i++){
                 //一次判断当前数组中的div是否为选中的div
                 if(divs[i] != div){
                   divs[i].style.display ="none"
                 }
               }
               //修改div对象身上的display样式内容，修改display:block;
               //判断当前div是否打开，如果打开则关闭，如果关闭则打开
               if(div.style.display == "none"){
                 div.style.display ="block"
               }else{
                 div.style.display ="none"
               }
               //div.style.display = div.style.display == "none"?"block":"none";
             }
           </script>
         </head>
         <body>
           <table>
             <tr>
               <td>
                 <a href="javascript:void(0)" onclick="openDiv(this)">君王好友</a>
                 <div>
                   秦始皇<br />
                   刘邦<br />
                   李世民<br />
                   康熙<br />
                 </div>
               </td>
             </tr>
             <tr>
               <td>
                 <a href="javascript:void(0)" onclick="openDiv(this)">三国好友</a>
                 <div>
                   刘备<br />
                   关羽<br />
                   张飞<br />
                   赵云<br />
                 </div>
               </td>
             </tr>
             <tr>
               <td>
                 <a href="javascript:void(0)" onclick="openDiv(this)">美女好友</a>
                 <div>
                   西施<br />
                   貂蝉<br />
                   杨贵妃<br />
                   王昭君<br />
                 </div>
               </td>
             </tr>
             <tr>
               <td>
                 <a href="javascript:void(0)" onclick="openDiv(this)">IT好友</a>
                 <div>
                   马云<br />
                   李开复<br />
                   俞敏洪<br />
                   李彦宏<br />
                 </div>
               </td>
             </tr>
           </table>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/55.html]]

     #+BEGIN_SRC html
       <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
       <html xmlns="http://www.w3.org/1999/xhtml">
         <head>
           <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
           <title>二级联动菜单</title>
           <script>
             function selectCity(thisobj){
               var cities = {
                 "北京市":["海淀区","朝阳区","丰台区"],
                 "河北省":["石家庄","唐山","秦皇岛"],
                 "辽宁省":["沈阳","大连","鞍山"],
                 "山东省":["青岛","济南","烟台"]
               }
               //1. 用户选中的省市信息
               var province = document.getElementById("province").value;
               //2. 根据省市信息获取对应的城市信息
               var city = cities[province];
               //3. 将获取到的城市添加到第二个下拉框当中
               //3.1 获取第二个下拉框
               var sel = document.getElementById("city");
               //清空第二个下拉框
               //通过设置第二个下拉框的html内容来控制内容清空
               sel.innerHTML = "<option>--请选择--</option>"
               //3.2 循环添加城市信息
               for(var i=0;i<city.length;i++){
                 sel.innerHTML += "<option>"+city[i]+"</option>"
               }
             }
             </script>
         </head>
         <body>
           <select id="province" onchange="selectCity(this)">
             <option>--选择省市--</option>
             <option>北京市</option>
             <option>河北省</option>
             <option>辽宁省</option>
             <option>山东省</option>
           </select>
           <select id="city">
             <option>--选择城市--</option>
           </select>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/56.html]]
   - 表单的非空校验
     #+BEGIN_SRC html
       <html>
         <head>
           <title>表单页面</title>
           <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
           <script>
             function checkData(){
               var canSub = true;
               //1. 非空校验
               //获取要判断的元素
               canSub = checkNull("username","用户名不能为空！") && canSub;
               canSub = checkNull("password","密码不能为空！") && canSub;
               canSub = checkNull("password2","确认密码不能为空！") && canSub;
               canSub = checkNull("nickname","昵称不能为空！") && canSub;
               canSub = checkNull("email","邮箱不能为空！") && canSub;
               canSub = checkNull("img","头像不能为空！") && canSub;
               canSub = checkNull("valistr","验证码不能为空！") && canSub;
               //2. 单选框的非空校验
               //获取页面中的全部单选框
               var gender = document.getElementsByName("gender");
               //循环判断是否选择任意一个元素
               //判断单选框的选中状态是否相同，如果相同则证明用户没有选中单选框
               var gender_msg = document.getElementById("gender_msg");
               //清空
               gender_msg.innerText = "";
               if(gender[0].checked == gender[1].checked){
                 gender_msg.innerText = "性别不能为空!";
                 canSub = false;
               }

               //3. 复选框的非空校验
               var like = document.getElementsByName("like");
               //遍历爱好，如果用户选中其中任意一个元素，则证明复选框被选中，如果遍历至最后仍然没有元素被选中则证明复选框未被选中
               var flag = false;
               for(var i = 0;i<like.length;i++){
                 if(like[i].checked == true){
                   //证明用户选中复选框
                   flag = true;
                 }
               }
               var like_msg = document.getElementById("like_msg");
               //清空
               like_msg.innerText = "";
               if(!flag){
                 like_msg.innerText = "爱好不能为空！";
                 canSub = false;
               }

               //4. 密码一致性校验
               var password = document.getElementsByName("password")[0].value;
               var password2 = document.getElementsByName("password2")[0].value;
               var password2_msg = document.getElementById("password2_msg");
               if(password != "" && password2 != "" && password != password2){
                 //密码不一致则需要提示用户
                 password2_msg.innerText = "两次密码不一致";
                 canSub = false;
               }

               //5. 邮箱格式校验
               var email = document.getElementsByName("email")[0].value;
               //lishuai@tedu.cn
               var reg = /\w+@\w+(\.\w+)+/;
               var email_msg = document.getElementById("email_msg");
               if(email != "" && !reg.test(email)){
                 email_msg.innerText = "邮箱格式不正确";
                 canSub = false;
               }
               return canSub;
             }
             function checkNull(name,msg){
               var tag = document.getElementsByName(name)[0].value;
               var tag_msg = document.getElementById(name+"_msg");
               //清空消息提示
               tag_msg.innerText = "";
               if(tag == ""){
                 tag_msg.innerText = msg;
                 return false;
               }
               return true;
             }

             function descFocus(thisobj){
               //如果聚焦textarea时文本内容为请输入描述信息~！，则清空textarea
               if(thisobj.value == "请输入描述信息~！"){
                 thisobj.value = "";
               }
             }
             function descBlur(thisobj){
               //如果用户离焦textarea时，没有书写任何内容，则应该将请输入描述信息~！回显
               if(thisobj.value == ""){
                 thisobj.value = "请输入描述信息~！";
               }
             }
           </script>
           <style type="text/css">
             span{
                 color:red;
                 font-size:12px;
             }
           </style>
         </head>
         <body>
           <form action="http://localhost:8080" method="POST" onsubmit="return checkData()">
             <table border="1px" align="center" cellpadding="10px" cellspacing="0px" borderColor="red" bgcolor="pink">
               <caption><font color="red" size="6">注册表单</font></caption>
               <input type="hidden" name="id" value="9527"/>
               <tr>
                 <td>用户名:</td>
                 <td><input type="text" name="username" /> <span id="username_msg"></span></td>
               </tr>
               <tr>
                 <td>密码:</td>
                 <td><input type="password" name="password"/> <span id="password_msg"></span></td>
               </tr>
               <tr>
                 <td>确认密码:</td>
                 <td><input type="password" name="password2"/> <span id="password2_msg"></span></td>
               </tr>
               <tr>
                 <td>性别：</td>
                 <td>
                   <input type="radio" name="gender" value="男"/>男
                   <input type="radio" name="gender" value="女"/>女 <span id="gender_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td>昵称：</td>
                 <td><input type="text" name="nickname"/> <span id="nickname_msg"></span></td>
               </tr>
               <tr>
                 <td>邮箱：</td>
                 <td><input type="text" name="email"/> <span id="email_msg"></span></td>
               </tr>
               <tr>
                 <td>爱好：</td>
                 <td>
                   <input type="checkbox" name="like" value="lq"/>篮球
                   <input type="checkbox" name="like" value="zq"/>足球
                   <input type="checkbox" name="like" value="qq"/>铅球
                   <input type="checkbox" name="like" value="blq"/>玻璃球
                   <span id="like_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td>客户类型：</td>
                 <td>
                   <select name="type">
                     <option value="pm">平民</option>
                     <option value="sxdy">少先队员</option>
                     <option value="gqty">共青团员</option>
                     <option value="ybdy">预备党员</option>
                     <option value="zsdy">正式党员</option>
                   </select>
                   <span id="type_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td>头像：</td>
                 <td>
                   <input type="file" name="img"/> <span id="img_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td>描述信息：</td>
                 <td>
                   <textarea id="desc" rows="5" cols="45" name="desc" onfocus="descFocus(this)" onblur="descBlur(this)">请输入描述信息~！</textarea> <br/><span id="desc_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td>验证码：</td>
                 <td>
                   <input type="text" name="valistr"/>
                   <img src="../image/img/vc.jpg" width="100px" height="20px"/>
                   <span id="valistr_msg"></span>
                 </td>
               </tr>
               <tr>
                 <td colspan="2" align="right">
                   <input type="submit" value="提 交"/>
                   <input type="reset" value="重 置"/>
                 </td>
               </tr>
             </table>
           </form>
         </body>
       </html>
     #+END_SRC
     [[./SourceCode/57.html]]
     1. 创建元素：
        document.createElement("节点类型");//为指定标签创建一个元素的实例
     2. 挂载元素：
        - 要指定元素挂载到哪一个父节点身上
          parentNode.AppendChild(childNode);//在父元素最后位置添加子元素
        - 将新节点插入到旧节点之前
          parentNode.insertBefore(newNode,oldNode);//将元素作为父对象的子节点插入到文档层次结构中
     3. 删除元素:将父节点身上的一个子节点移除，这个操作就是删除节点
        parentNode.removeChile(childNode)
     4. 修改元素:使用新节点替换掉已有的节点
        parentNode.replaceChile(newNode,oldNode);
     5. 克隆节点：将当前元素再复制一份，并复制后的元素会作为返回值返回;在调用cloneNode()方法时，可以指定一个布尔值，如果指定为false，则表示仅复制div本身，div中的子元素或子内容全部放弃。如果指定为true，则表示完全复制div，包括其中的子元素或字内容。默认不写就是false
        div = div.cloneNode(boolean);//如果位false或者不写(默认)，不复制克隆节点中的子节点，只复制指定克隆节点。//如果位true，复制当前节点及其子节点
     6. 调整样式：
        #+BEGIN_SRC html
          <html>
            <head>
              <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
              <title>新闻广告</title>
              <style type="text/css">
                <!-- 伪元素选择器 -->
                a:link,a:visited {
                    color:#FF9900;
                    text-decoration:none;
                    font-size:15px;
                }
                a:hover {
                    color:#0099FF;
                }
                .newsstyle {
                    border:#0099FF 1px solid;
                    font-size:16px;
                    width:400px;
                }
                /*
          预先定一些选择器
               ,*/
                .max {
                    border:#0099FF 1px solid;
                    font-size:20px;
                    color:#FF0000;
                    background-color:#CCFFFF;
                    width:400px;
                }
                .min {
                    border:#0099FF 1px solid;
                    font-size:12px;
                    color:#0000FF;
                    background-color:#FFFFFF;
                    width:400px;
                }
              </style>
              <script type="text/javascript">
                function resize(obj){
                  //将用户传入的参数作为div的样式值使用
                  //1. 获取div对象
                  var newstext = document.getElementById("newstext");
                  //2. 设置div身上的样式值
                  newstext.className = obj;
                }
              </script>
            </head>
            <body>
              <h2>这是一个大新闻.</h2>
              <a href="javascript:void(0)" onclick="resize('min')">小字体</a>
              <a href="javascript:void(0)" onclick="resize('newsstyle')">中字体</a>
              <a href="javascript:void(0)" onclick="resize('max')">大字体</a>
              <hr />
              <div id="newstext" class="newsstyle">
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
                演示接口.很多内容.怎么办呢?等等<br />
              </div>
            </body>
          </html>
        #+END_SRC

        - 通过修改元素的class属性，使元素使用不同的类来启用不同的样式
          div.className = "xxx";
        - 通过元素的style属性来进行样式的修改
          div.style.backgroundColor = "#f00";
        - 通过修改元素display属性，调整节点展示方法：
          div.style.display = "none"|"block";
     + 拓展：nextSibling获取对此对象的下一个兄弟对象的引用
** 5. 问题：
   dom解析时，在页面中写好一个function demo1(){},适用button按钮调用这个方法，执行却发现报错，错误：ncaught ReferenceError:demo1 is not defined(demo1未定义)
   - 解决：
     仔细检查<script></script>中的function demo1(){}代码，少了大括号，会出现未定义的错误
* jQuery
** 1. jQuery概述
    1. 由于用户在js中编写的内容十分繁多，将一些常用的操作和行为进行了封装，封装成很多个函数，这些函数就构成了一个js的函数库，用户在使用的时候直接调用函数库的函数即可，这个函数库就是jQuery
    2. jQuery可以写的更少，但是做的更多
    3. jQuery的本质是js
** 2. jQuery的优势
    1. 可以简化JavaScript代码
    2. 可以像css选择器一样选择元素
    3. 可以修改css一样修改页面中的样式
    4. 可以兼容常用的浏览器
** 3. jQuery版本支持
    jQuery分为很多版本，还分为未压缩和压缩版，根据需要选择对应的版本进行下载
    - 1.x 支持常用的浏览器和IE6+
    - 2.x 支持常用的浏览器和IE9+
    - 3.x 支持常用的浏览器和IE9+
    注意jQuery不兼容老版本，因为jQuery升级除了会做一些内部优化之外，还会删除以前的一些代码，比如删除一些方法，或者是添加一些新的方法，所以在升级之后，以前的代码可能会无法执行
** 4. jQuery引入
    需要在页面中引入一个js文件，这个js文件就是jQuery的函数库，只有引入函数库之后才能够使用jQuery代码
    #+BEGIN_SRC html
      <script src = "js/jquery-1.4.2.js"></script>
    #+END_SRC

    #+BEGIN_SRC html
      <html>
        <head>
          <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
          <title>jQuery的引入</title>
          <script type="text/javascript" src="../other/jquery-1.4.2.js">
          </script>
          <script type="text/javascript">
            window.onload = function(){
              $("div").text("aaaaa");
            }
          </script>
        </head>
        <body>
          <div id="test" class="test">
          </div>
      </body>
      </html>
    #+END_SRC
    [[./SourceCode/58.html]]
    jQuery类库其实就是一个普通的js文件，和之前在html中引入js文件方式一样的
** 5. jQuery的使用方式
    $就是jQuery的意思$("div") <==> jQuery("div")
** 6. js对象和jQuery对象的相互转换
    - js对象->jQuery对爱那个
      将已有的js对象使用$()包起来即可由js对象变为jQuery对象
      #+BEGIN_SRC html
        <html>
          <head>
            <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
            <title>jQuery的引入</title>
            <script type="text/javascript" src="../other/jquery-1.4.2.js">
            </script>
            <script type="text/javascript">
              window.onload = function(){
                //js对象->jQuery对象
                var div = document.getElementById ("test");
                $ (div).text("bbb")
              }
            </script>
          </head>
          <body>
            <div id="test" class="test">
            </div>
          </body>
        </html>
      #+END_SRC
      [[./SourceCode/60.html]]
    - jQuery对象->js对象
      jQuery对象一般利用选择器选中页面
      #+BEGIN_SRC html
        <html>
          <head>
            <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
            <title>jQuery的引入</title>
            <script type="text/javascript" src="../other/jquery-1.4.2.js">
            </script>
            <script type="text/javascript">
              window.onload = function(){
                //jQuery对象->js对象和jquery对象
                //第一种
                var div = $("div")[0];
                div.innerText = "ccc";
              }
            </script>
          </head>
          <body>
            <div id="test" class="test">
            </div>
          </body>
        </html>
      #+END_SRC
      [[./SourceCode/60.html]]
* Git
file:./other/Git.pdf
* MySQL
** 1. 数据库概述
    1. 数据库的概念
       数据路：存储数据的仓库
       数据路类型：层次式数据路，网络式数据路，关系型数据库
    2. 关系型数据路
       - 使用关系模型来存储的数据的数据路叫做关系型数据路
         常见数据库
         - 商业数据路
           Oracle、SQLServer、DB2、Sybase
         - 开源数据路
           MySQL、SQLLite
    3. MySQL数据路的安装和配置
       [[./Img/18.png]]
       [[./Img/19.png]]
    4. MySQL数据库服务器、数据库和表的关系
       所谓安装数据库服务器，只是在机器上装可一个数据库管理程序，这个管理程序可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据路创建多个表，以保存程序中实体的数据。

       数据库服务器、数据库和表的关系如图所示：
       [[./Img/20.png]]
    5. 数据在数据库中的存储方式
       [[./Img/21.png]]
    6. SQL语言
       - Structured Query Language,结构化查询语言
       - 非过程性语言
       - 美国国家标准局（ANSI）与国际标准化组织（ISO）已经制定了SQL标准
       - 为加强SQL的语言能力，各厂商增强了过程性语言的特征
         - 如Oracle的PL/SQL过程性处理能力
         - SQL Server、Sybase的T-SQL
       - SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能。
** 2. SQL语句---库、表操作
    1. 创建数据库
       #+BEGIN_SRC sql
         CREATE DATABASE [IF NOT EXISTS] db_name [create_specification[,create_specification]...] create_specification:    7
         [DEFAULT] CHARACTER SET charset_name  |  [DEFAULT] COLLATE collation_name
       #+END_SRC
       CHARACTER SET:指定数据库采用的字符集

       COLLATE：指定数据库字符集的比较方式

       （查看mysql存储位置：show global variables like "%datadir%";）

       #+BEGIN_SRC
         练习：
             1. 创建一个名称为mydb1的数据库
                create database mydb1;
             2. 创建一个使用utf8字符集的mydb2数据库
                create database mydb2 character set gbk;
             3. 创建一个使用utf8字符集，并带校对规则的mydb3数据库
                create database mydb3 character utf8 collate utf8_bin
       #+END_SRC
    2. 查看、删除数据库
       - 显示数据库语句：
         #+BEGIN_SRC sql
           SHOW databases
         #+END_SRC
       - 显示数据库创建语句：
         #+BEGIN_SRC sql
           SHOW CREATE DATABASE db_name
         #+END_SRC
       - 数据库删除语句：
         #+BEGIN_SRC sql
           DROP DATABASE [IF EXISTS] db_name
         #+END_SRC
       #+BEGIN_SRC
         练习：
             1. 查看当前数据库服务器中的所有数据库
                show databases;
             2. 查看当前创建mydb2数据库的定义信息
                show create database mydb2;
             3. 删除前面创建的mydb1数据库
                drop database mydb1
       #+END_SRC
    3. 修改数据库
       #+BEGIN_SRC sql
         ALTER DATABASE [IF NOT EXISTS] db_name [alter_specification [,alter_specification]...]alter_specification
         [DEFAULT] CHARACTER SET charset_name | [DEFAULT] COLLATE collation_name
       #+END_SRC
    4. 选择数据库
       #+BEGIN_SRC sql
         use db_name;
       #+END_SRC
       查看当前使用的数据库：
       #+BEGIN_SRC sql
         select database();
       #+END_SRC
    5. 创建表（基本语句）
       #+BEGIN_SRC sql
         CREATE TABLE table_name(
         column_name column_type,
         column_name column_type,
         column_name column_type,
         )[character set 字符集][collate 校对规则]
       #+END_SRC
       + 注意：创建表时，要根据需保存的数据创建相应的列，并根据数据的类型定义相应的列类型。例：user对象
         [[./Img/22.png]]
    6. MySQL常用数据类型
       - 字符串型
         + VARCHAR、CHAR
       - 大数据类型
         BLOB、TEXT
       - 数值型
         TINYINT、SMALLINT、INT、BIGINT、FLOAT、DOUBLE
       - 逻辑型
         BIT
       - 日期型
         DATE、TIME、DATETIME、TIMESTAMP
    7. 创建表练习
       创建员工表employee---查看表结构：desc表名;
       #+BEGIN_SRC
         字段：id、name、gender、birthday、entry_date、job、salary、resume
         属性：整型、字符型、字符型、日期型、日期型、字符型、小数型、大文本型
         创建完毕之后利用desc employee来查看表结构
       #+END_SRC
    8. 定义表单字段的约束
       - 定义主键约束
         + primary key：不允许为空，不允许重复
         + 删除主键：alter table tablename drop primary key;
         + 主键自动增长：auto_increment
       - 定义唯一约束
         + unique
         + 例如：name varchar(20)unique
       - 定义非空约束
         + not null
         + 例如：salary double not null
       - 外键约束
    9. 查看表信息
       查看表结构：
       #+BEGIN_SRC sql
         desc tabName
       #+END_SRC
       查看当前所有表：
       #+BEGIN_SRC sql
         show tables
       #+END_SRC
       查看当前数据库表键表语句
       #+BEGIN_SRC sql
         show create table tabName;
       #+END_SRC
    10. 修改表
        使用ALTER TABLE语句追加，修改，或删除列的语法
        #+BEGIN_SRC sql
          ALTER TABLE table ADD column column_type [DEFAULT expr] [,column column_type]...;
          ALTER TABLE table MODIFY column column_type [DEFAULT expr] [,column column_type]...;
          ALTER TABLE table DROP column;
        #+END_SRC
        修改表的名称：
        #+BEGIN_SRC sql
          rename table 表名 to 新表名;
        #+END_SRC
        修改表的名称：
        #+BEGIN_SRC sql
          ALTER TABLE table change old_column new_column column_type;
        #+END_SRC
        修改表的字符集：
        #+BEGIN_SRC sql
          alter table user character set utf8;
        #+END_SRC
        - 练习：
          #+BEGIN_SRC
            在上面员工表的基本上增加一个image列
            修改job列，使其长度为60
            删除gender列
            表名改为user
            修改表的字符集为utf8
            列名name修改为username
          #+END_SRC
    11. 删除表
        #+BEGIN_SRC sql
          drop table tabName;
        #+END_SRC
** 3. 数据库的CRUD
    1. 数据库表记录CRUD语句
       - insert语句（增加数据）
       - Update语句（更新数据）
       - Delete语句（删除数据）
       - Select语句（查找数据）
       - Insert语句
    2. 使用INSERT语句向表中插入数据
       #+BEGIN_SRC sql
         INSERT INTO table_name [(column [,column...])] VALUES (value [,value...]);
       #+END_SRC
       - 插入的数据应与字段的数据类型相同
       - 数据的大小应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40的列中
       - 在values中列出的数据位置必须与被加入的列的排列位置相对应
       - 字符和日期型数据应包含在单引号中
       - 插入空值：不指定或insert into table value（null）
       - 如果要插入所有字段可以省写列列表，直接按表中字段顺序写值列表
       #+BEGIN_SRC
         insert语句练习
             使用insert语句向employee表中插入三个员工的信息
             字段名：id、name、gender、birthday、salary、entry_date、resume
             字段类型：整型、字符串型、字符串型、日期型、浮点型、日期型、大文本型
       #+END_SRC
       - TIP：mysql中文乱码
         - mysql有六处使用了字符集，分别为：client、connection、database、results、server、system
         - client是客户端使用的字符集
         - connection是连接数据库的字符集设置类型，如果程序没有指明连接数据库使用的字符集类型就按照服务器默认的字符集设置
         - database是数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将使用服务器安装时指定的字符集设置
         - results是数据库给客户端返回时使用的字符集设定，如果没有指明，使用服务器默认的字符集
         - server是服务器安装时指定的默认字符集设定
         - system是数据库系统使用的字符集设定（utf-8不可修改）
           show variables like'character%';

           set names gbk;临时修改当前CMD窗口和mysql的通信编码字符集
         - 通过修改my.ini修改字符集编码
           请到mysql安装目录下面找到my.ini文件

           修改default-character-set=utf8为default-character-set=gbk

           有两个地方都要改

           修改文件前，先停止mysql服务，等修改后再重新启动

           使用dos命令：net stop mysql 来停止服务 net start mysql来启动
    3. Update语句
       使用update语句修改表中数据
       #+BEGIN_SRC sql
         update tbl_name
         set col_name1=expr1 [,col_name2=expr2 ...] [where where_definition]
       #+END_SRC
       update语法可以用新值更新原有表行中的各列

       set子句指示要修改哪些列和要给予哪些值

       where子句指定更新哪些行，如没有where子句，则更新所有的行
       #+BEGIN_SRC
         update语句练习：
             在上面创建的employee表中修改表中的记录
             要求：
                 将所有员工薪水修改为5000元
                 将姓名为'zs'的员工薪水修改为3000元
                 将姓名为'lisi'的员工薪水修改为4000元，job改为ccc
                 将'wu'的薪水在原有基础上增加1000元
       #+END_SRC
    4. Delete语句
       使用delete语句删除表中数据
       #+BEGIN_SRC sql
         delete from tbl_name [where where definition]
       #+END_SRC
       - 如果不使用where子句，将删除表中所有数据
       - delete语句不能删除某一列的值（可使用update）
         + update table_name set 字段名='';
       - 使用delete语句仅删除记录，不删除表本身，如要删除表，使用drop table语句
         + drop table table_name;
       - 同insert和update一样，从一个表中删除记录将引起其它表的参照完整性问题，在修改数据库数据时，头脑中应该始终不要忘记这个潜在的问题
       - 外键约束
       - 删除表中数据也可使用truncate table语句，它和delete有所不同，参看mysql文档
       #+BEGIN_SRC
         删除表中名称为'zs'的记录
         删除表中所有记录
         使用truncate删除表中记录
       #+END_SRC
    5. select语句（1）
       基本select语句
       #+BEGIN_SRC sql
         select [distinct] *| {column1,column2,column3...}from table;
       #+END_SRC
       select指定查询哪些列的数据

       column指定列名

       *号代表查询所有列

       from指定查询哪张表

       DISTINCT可选，指显示结果时，是否剔除重复数据
       #+BEGIN_SRC
         查询表中所有学生的信息
         查询表中所有学生的姓名和对应的英语成绩
         过滤表中重复数据，distinct去重
       #+END_SRC
    6. select语句（2）
       在select语句中可使用表达式对查询的列进行运算
       #+BEGIN_SRC sql
         select * | {column1 | expression,column2 | expression,..} from table;
       #+END_SRC
       在select语句中可使用as语句
       #+BEGIN_SRC sql
         select column as 别名 from 表名;
       #+END_SRC
       #+BEGIN_SRC
         在所有学生分数上加10分特长分显示
         统计每个学生的总分
         使用别名表示学生总分
       #+END_SRC
    7. select语句（3）
       #+BEGIN_SRC
         使用where子句，进行过滤查询：
             查询姓名为xxx的学生成绩
             查询英语成绩大于90分的同学
             查询总分大于200分的所有同学
       #+END_SRC
    8. select语句（4）
       在where子句中经常使用的运算符
       [[./Img/23.png]]
       [[./Img/24.png]]
       [[./Img/25.png]]
       [[./Img/26.png]]
       [[./Img/27.png]]
       [[./Img/28.png]]
       like语句中，%代表零个或多个任意字符，_代表一个字符，例first_name like '_a%';
       #+BEGIN_SRC
         查询英语分数在80~100之间的同学
         查询数学分数为75，76，77的同学
         查询所有姓张的学生成绩
         查询数学分>70,语文分>80的同学
       #+END_SRC
    9. select语句（5）
       使用order by子句排序查询结果
       #+BEGIN_SRC sql
         select column1,column2,column3.. from table;
         order by column asc|desc
       #+END_SRC
       Order by指定排序的列，排序的列既可是表中的列名，也可以是select语句后指定的列名

       Asc升序（默认）、Desc降序

       order by子句应位于select语句的结尾
       #+BEGIN_SRC
         对语文成绩排序后输出
         对总分排序按从高到低的顺序输出
         对姓李的学生成绩排序输出
       #+END_SRC
    10. 聚集函数 - count
        count(列名)返回某一列，行的总数
        #+BEGIN_SRC sql
          select count(*) | count(列名) from table_name [where where_definition]
        #+END_SRC
        #+BEGIN_SRC
          练习：
              统计一个班级共有多少学生？
              统计数学成绩大于90的学生有多少人？
              统计总分大于250的人数有多少？
        #+END_SRC
    11. 聚集函数 - sum
        sum函数返回满足where条件的行的和
        #+BEGIN_SRC sql
          select sum(列名) {,sum(列名)...} from table_name[where where_definition]
        #+END_SRC
        #+BEGIN_SRC
          练习：
              统计一个班级数学总成绩？
              统计一个班级语文、英语、数学各科的总成绩
              统计一个班级语文、英语、数学的成绩总和
              统计一个班级语文成绩平均分
        #+END_SRC
        注意：sum仅对数值起作用，否则会报错

        注意：对多列求和，","号不能少
    12. 聚集函数 - AVG
        AVG函数返回满足where条件的一列的平均值
        #+BEGIN_SRC sql
          select avg(列名) {,avg(列名)...} from table_name [where where_definition]
        #+END_SRC
        #+BEGIN_SRC
          练习：
              求一个班级数学平均分？
              求一个班级总分平均分？
        #+END_SRC
    13. 聚集函数 - max/min
        max/min函数返回满足where条件的一列的最大/最小值
        #+BEGIN_SRC sql
          select max(列名) from table_name [where where_definition]
        #+END_SRC
        #+BEGIN_SRC
          练习：
              求班级最高分和最低分（数值范围在统计中特别有用）
        #+END_SRC
    14. select语句（6）分组操作
        [[./Img/29.png]]
        使用group by子句对列进行分组
        #+BEGIN_SRC sql
          select column1,column2,column3... from table
          group by column having ...
        #+END_SRC
        #+BEGIN_SRC
          练习：对订单表中商品归类后，显示每一类商品的总价
              使用having子句，对分组结果进行过滤
        #+END_SRC
        #+BEGIN_SRC
          练习：查询购买了几类商品，并且每类总价大于100的商品
        #+END_SRC
        - where和having区别：
          where在分组前进行条件过滤，having在分组后进行条件过滤。使用where的地方都可以用having替换。但是having可以使用分组函数，而where后不可以使用
** 4. 备份、回复数据库
    1. 备份数据库表中的数据
       cmd>mysqlump -u 用户名 -p 数据库名> 文件名.sql

       mysqldump -uroot -p db_name > d:/1.sql
    2. 恢复数据库
       （注意：如果数据库已经删除，先创建数据库在回复数据）
       - 方式一：在cmd中
         mysql -u用户名 -p 数据库名 < 文件名.sql

         mysql -uroot -p db_name < d:/1.sql

         mysql -uroot -p mydb3 < d:/1.sql
       - 方式二：在mysql客户端中
         source 文件名.sql
         source d:/1.sql
    3. 练习
       备份test库中的数据，并恢复
** 5. 多表设计
    1. 多表设计--外键约束
       定义外键约束
       #+BEGIN_SRC sql
         foreign key(ordersid) references orders(id)
       #+END_SRC
    2. 多表设计中三种实体关系
       1. M:N的联系引入关系表
          联系的属性及两个实体的主标识形成关系表

          关系表的主键为两个实体主标识的组合
          [[./Img/30.png]]
       2. 1:N的联系可不引入关系表
          将关系的属性及非多方的主标识加入到多方表

          多方表的外键是非多方实体的主标识
          [[./Img/31.png]]
       3. 1:1的联系不必引入关系表
          [[./Img/32.png]]
** 6. 外键约束
    1. 外键
       - 用来通知数据库表与表字段之间的对应关系，并让数据库帮我们维护这样关系的键叫做外键
       - 外键作用：维护数据的完整性、一致性
       - 定义外键约束
         #+BEGIN_SRC sql
           foreign key(ordersid) references orders(id)
         #+END_SRC
    2. 案例
       新建部门表dept(id,name),通过外键约束建立与员工表emp关系
       #+BEGIN_SRC sql
         create table dept(
         id int primary key auto_increment,
         name varchar(20)
         );
       #+END_SRC
       #+BEGIN_SRC sql
         insert into dept values(null,'财务部');
         insert into dept values(null,'人事部');
         insert into dept values(null,'科技部');
         insert into dept values(null,'销售部');
       #+END_SRC
       #+BEGIN_SRC sql
         create table emp(
         id int primary key auto_increment,
         name varchar(20),
         dept_id int,
         foreign key(dept_id) references dept(id)
         );
       #+END_SRC
       #+BEGIN_SRC sql
         insert into emp values(null,'张三',1);
         insert into emp values(null,'李四',2);
         insert into emp values(null,'老王',3);
         insert into emp values(null,'赵四',4);
         insert into emp values(null,'刘能',4);
       #+END_SRC
** 7. 多表查询
    1. 多表查询
       案例：
       #+BEGIN_SRC sql
         create table dept(
         id int primary key auto_increment,
         name varchar(20)
         );
       #+END_SRC
       #+BEGIN_SRC sql
         insert into dept values(null,'财务部');
         insert into dept values(null,'人事部');
         insert into dept values(null,'科技部');
         insert into dept values(null,'销售部');
       #+END_SRC
       #+BEGIN_SRC sql
         create table emp(
         id int primary key auto_increament,
         name varchar(20),
         dept_id int
         );
       #+END_SRC
       #+BEGIN_SRC sql
         insert into emp values(null,'张三',1);
         insert into emp values(null,'李四',2);
         insert into emp values(null,'老王',3);
         insert into emp values(null,'刘能',5);
       #+END_SRC
       - 需求：查询出部门信息和部门所对应的员工信息
         #+BEGIN_SRC sql
           select * from dept,emp;
         #+END_SRC
    2. 笛卡尔积查询
       - 概念
         两张表相乘得出来的结果，如果左边表有m条记录，右边有n条记录，则查询出来的结果就是m*n条。这些查询结果中包含大量错误的结果，通常不会使用这种查询
         [[./Img/33.png]]
         #+BEGIN_SRC sql
           select * from dept,emp;
           select * from dept,emp where emp.dept_id=dept.id;
           select * from dept d,emp e where e.dept_id=d.id;
         #+END_SRC
    3. 内连接查询
       内连接查询概念：左边表有且右边表也有的记录
       [[./Img/34.png]]
       #+BEGIN_SRC sql
         select * from dept d inner join emp e on e.dept_id=d.id;
       #+END_SRC
    4. 左、右连接查询以及全连接查询
       - 左连接查询：在内连接查询的基础上，加上左边表有而右边表没有的记录
         **查询出部门所对应的员工信息，同时列出那些没有员工的部门
         #+BEGIN_SRC sql
           select * from dept d left join emp e on e.dept_id=d.id;
         #+END_SRC
       - 右外连接查询：在内连接查询的基础上，加上右边表有而左边表没有的记录
         **查询出部门所对应的员工信息，同时列出那些没有部门的员工
         #+BEGIN_SRC sql
           select * from dept d right join emp e on e.dept_id=d.id;
         #+END_SRC
       - 全外连接查询：在内连接查询的基础上，加上左边表有而右边表没有的记录和右边表而左边表没有的记录
         **查询出部门所对应的员工信息，同时列出那些没有员工的部门及那些没有部门的员工
         #+BEGIN_SRC sql
           select * from dept d full join emp e on e.dept_id=d.id;
           ## mysql不支持全外连接查询
         #+END_SRC
         **通过union关键字来模拟全外连接查询
         #+BEGIN_SRC sql
           select * from dept left join emp on emp.dept_id=dept.id
           union
           select * from dept right join emp on emp.dept_id=dept.id;
         #+END_SRC
** 8. 扩展
    1. mysql查询关键字执行顺序
       查询中用到的关键字主要包含六个，并且他们的顺序依次为：

       select--from--where--group by--having--order by

       其中select和from是必须的，其他关键词是可选则，这六个关键字的执行顺序，与sql语句的书写顺序并不是一样的，而是按照下面的顺序来执行

       from--where--group by--having--select--order by
       + 注意：
         1. 虽然select在having后执行，但是mysql中仍然可以在having中使用select语句定义的别名。

            原因分析：mysql在查询的时候会产生一个临时表，所有的字段名称（别名）在临时表中已经产生，产生了临时表之后才会进行having操作。也就是说mysql内部有一定的解析顺序，解析顺序select优先于having。
         2. Oracle中having无法使用select语句内的别名
    2. insert into和replace into和merge into
       1. insert into是mysql的基本插入语句
       2. replace into是mysql中的代替插入语句，可以理解为insert into的升级版。replace into在执行的时候，首先会根据指定的主键或者唯一索引判断当前表中是否存在指定的主键或索引，如果主键或唯一索引已经存在，则先将对应的索引的数据删除，然后在索引位置插入replace into中包含的数据。如果主键和唯一索引没有存在，则直接在索引位置插入replace into中包含的数据
       3. merge into是oracle数据库中的代替插入语句。实现方式和replace into类似
       4. 执行效率
          1. 如果指定索引位置没有数据，insert into和replace into执行效率相差无几，二者效率相同
          2. 如果指定位置索引已经存在，insert into语句不能正常执行，replace into语句可以正常执行
       5. 注意：
          虽然replace into比较好实用，但是也存在一定风险：
          1. replace每次要重新分配自增id;
          2. replace中执行delete时，在有外键的情况下会很麻烦;
          3. 如果delete时定义的有触发器，则会被执行
          4. 副作用也会被传播到replica slave
       6. 推荐使用insert into ... on duplicate key update
          on duplicate key update是mysql特有的一个sql关键字，只能在mysql中使用。在mysql数据库中，如果在insert语句后面带上on duplicate key update子句，而要插入的行与表中现有记录的唯一索引或主键中产生重复值，那么就会发生旧行的更新；如果插入的行数据与现有表中记录的唯一索引或者主键不重复，则执行新记录插入操作。比如有这样一张表：
          #+BEGIN_SRC sql
            cteate table func(id int primary key,count int,birthday date);
            insert into func values(1,1,'1990-09-09');
          #+END_SRC
          [[./Img/35.png]]
          #+BEGIN_SRC sql
            insert into func values(1,1,'1990-09-09')onduplicate key update count=count+1;
          #+END_SRC
          删除元表数据，将新数据插入
          [[./Img/36.png]]
          提示两行收到影响，说明先执行的删除操作，然后插入新的数据
          [[./Img/37.png]]
          观察到没有任何新数据插入，count字段被更新。（count字段更新是因为刚刚的插入语句中书写了update count=count+1;）

          如果不希望任何字段更新，可以写成如下格式：
          #+BEGIN_SRC sql
            insert into func values(1,1,'1990-09-09')on duplicate key update=values(count);
          #+END_SRC
          再次执行，没有新数据插入到数据库中
    3. mysql内置函数
    4. 在已经存在的表中添加外键
       #+BEGIN_SRC sql
         alter table tb_name add constraint fk_name foreign key(tb_name.id)references tb_stu(id);
       #+END_SRC
       例如:
           #+BEGIN_SRC sql
           alter table emp add constraint forkey foreign key(dept_id)references dept(id);
           #+END_SRC
           该语句是在tb_name表上添加一个外键约束，引用tb_stu的主键，fk_name是约束的名字

           删除约束：
           #+BEGIN_SRC sql
             alter table tb_name drop constraint fk_name;
           #+END_SRC
    5. 外键的使用情景：
       在不要求吞吐速度而对数据的正确性和安全性，推荐使用外键

       如果面对高吞吐量，要求优先保证读取效率时，则不推荐使用外键
    6. 删除的时候使用别名
       原句：
       #+BEGIN_SRC sql
         delete from employee where id=1;
       #+END_SRC
       别名：
       delete e fromemployee as e where id=1;
