1.数据库
	创建数据库
		create database mydb1;
	查看全部数据库
		show databases;
	查看数据库创建语句
		show create database mydb1;
	删除数据库
		drop database mydb1;
	~修改数据库
		alter database mydb1 character set gbk;
	使用数据库
		use database_name
2.表操作
	创建表		
		id        	int                              
		name 	string
		password 	string
		birthday 	date

		create table user(
			id int,
			name varchar(10),
			password varchar(15),
			birthday date
		);
		
	○ 字符串型  
		§ VARCHAR、CHAR   
	○ 大数据类型
		§ BLOB、TEXT
	○ 数值型
		§ TINYINT 、SMALLINT、INT、BIGINT、FLOAT、DOUBLE
	○ 逻辑型 
		§ BIT
	○ 日期型
		§ DATE、TIME、DATETIME、TIMESTAMP

		创建一个不带主键的employee表：
			create table employee(
				id int,
				name varchar(10),
				gender char(2),
				birthday date,
				entry_date date,
				job varchar(20),
				salary double,
				resumen text
			);
		创建一个带主键的employee表：
			create table employee(
					id int primary key auto_increment ,
					name varchar(20),
					gender varchar(2) ,
					birthday date,
					entry_date date,
					job varchar(20),
					salary double,
					resume text
				);
		查看表结构：
			desc employee;
		查看当前数据库中所有表：
			show tables;
		查看当前表的创建语句：
			show create table employee;
	修改表：
		添加字段：ALTER TABLE table_name   ADD     column_name datatype ;
		修改字段：alter table table_name  modify  column_name datatype;
		删除字段：alter table table_name drop column_name;
		修改字段 alter table table_name change column_name new_column_name filedtype;
		修改表名：
			rename table employee to emp;
		
		a. 练习
			在上面员工表的基本上增加一个image列。
				alter table employee add image blob;
			修改job列，使其长度为60。
				alter table employee modify job varchar(60);
			删除gender列。
				alter table employee drop gender;
			表名改为user。
				rename table employee to emp;
			修改表的字符集为utf8
				alter table emp character set utf8;
			列名name修改为username
				alter table employee change name username varchar(20); 
	删除表:
		drop table emp;
3.数据操作
	1.插入数据
			字段名	字段类型
		id	整形
		name	字符串型
		gender	字符串型
		birthday	日期型
		entry_date	日期型
		job     字符串型
		salary	浮点型
		resume	大文本型

		insert into employee values(1,'ls','m','1999-09-09','2000-09-09','eat',5000.0,'can eat');
		
		insert into employee values(1,'ls','m','1999-09-09','2000-09-09','eat',null,'can eat');
		由于在employee表名之后没有指定要插入的字段，所以在values后需要添加上全部字段的值，并且这些值必须按照表中字段顺序书写。
		
		insert into employee(id,name) values(2,'lg');
		insert into employee(name,id) values('pq',3);
		在插入数据的时候可以在表名之后添加上指定的字段名称，values书写的数据必须按照指定的字段名称顺序书写数据。

	向包含主键的表中插入数据时，请注意如下内容：
		insert into employee values(null,'ls','m','1999-09-09','2000-09-09','eat',5000.0,'can eat');
	插入数据的要求：
		(1)插入的数据类型必须要和字段的类型匹配。
		(2)字符串类型和日期类型必须要使用单引号包起来。
		(3)插入的数据长度不能超过当前字段指定的长度。
		(4)如果一个字段是自增字段，则这个字段不需要用户添加数据，填写一个null值即可自动增长。
	插入中文时的乱码处理：
		insert into employee values(null,'张三丰','男','1899-09-09','2000-09-09','少林',15000.0,'我要去武当');
		insert into employee values(null,'张无忌','女','1788-01-01','2019-01-01','明教',80000.0,'我要义父');
		insert into employee values(null,'朴乾','男','1799-02-01','2018-01-01','大内',80000.0,'我要休息');
	2.更新数据
		可以将数据库中已有行中的某一个或这个字段的值修改。
		update table_name set column_name = value;

		注意：如果要修改整张表中某一个字段的值，则直接使用基本更新语句即可。如果要修改一个行或几行数据则需要在基本更新语句之后添加上一个where子句，作为跳转判断，过滤出需要更新的数据。
		
		• 练习：在上面创建的employee表中修改表中的纪录。
		要求:
		将所有员工薪水修改为5000元。
			update employee set salary = 5000;
		将姓名为'张三丰'的员工薪水修改为3000元。
			update employee set salary = 3000 where name = '张三丰';
		将姓名为'ls'的员工薪水修改为4000元,job改为ccc。
			update employee set salary = 4000,job='ccc' where name ='ls';
		将'朴乾'的薪水在原有基础上增加1000元。
			update employee set salary = salary + 1000 where name='朴乾';
	3.删除数据
		delete from table_name;

		删除一行或几行数据：
			需要在原有删除语句后添加上where子句。
			
		a. Delete语句练习
			删除表中名称为’张三丰’的记录。
				delete from employee where name='张三丰';
			删除表中所有记录。
				delete from employee;
			使用truncate删除表中记录。
				truncate employee;

		delete from 只删除当前表中的数据，对表结构不产生影响。
		truncate会将整个表摧毁，然后依赖原有的表结构创建整张表。
		truncate删除效率较高，但是肯能会对表与表直接的关系产生不可恢复的影响。
		delete from删除效率虽然较低，但是不会对表结构，或表与表之间的关系产生影响。
		如果是单表操作可以使用truncate。 如果是多表操作不建议使用truncate。
	4.查询操作
		对数据库服务器中的数据查询，将查询并展示符合用户输入条件的结果。

		1.基本查询。
			select name from employee;
			select id,name,salary from employee;
			select name,id,salary from employee;
			
			select * from employee;
			注意：直接书写全部字段名称比书写*查询效率要高。
			distinct可以对指定字段实现去重操作。
			练习：
				查询表中所有学生的信息。
					select * from exam;
				查询表中所有学生的姓名和对应的英语成绩。
					select name,english from exam;
				过滤表中重复数据。distinct去重
					select distinct english from exam;

		2. 表达式查询:
			在查询结果的字段名称上可以使用as进行别名的修改，使用方式为
				select column_name as 别名 from exma;
			最终查询结果中的字段会以别名展示。
		练习：
			在所有学生分数上加10分特长分显示。
				select name,math+10,chinese+10,english+10 from exam;
				select name,math+10 as math,chinese+10 as chinese,english+10 as english from exam;
			统计每个学生的总分。
				select name,math+chinese+english from exam;
			使用别名表示学生总分。
				select name,math+chinese+english as sum from exam;
				<==>
				select name math+chinese+english from exam;
		
		3.where子句的使用：
		使用where子句，进行过滤查询。练习：
		
		查询姓名为张飞的学生成绩
			select * from exam where name='张飞';
		查询英语成绩大于90分的同学
			select * from exam where english > 90;
		查询总分大于230分的所有同学
			select * from exam where math+chinese+english > 230;
			select name,math+chinese+english as sum from exam where math+chinese+english > 230;	
		注意：数据库关键字执行顺序：
			from--where--select--order by。


			
		4.where子句中的常用运算符
		Select语句(４)练习
		查询英语分数在 80－100之间的同学。
			select name,english from exam where english between 80 and 100;
		查询数学分数为75,76,80的同学。
			select name,math from exam where math in(75,76,80);
		查询所有姓张的学生成绩。
			select * from exam where name like '张%';
		查询数学分>70，语文分>80的同学。
			select * from exam where math>70 and chinese > 80;
		查询数学分>70或者英语分<70的同学。
			select * from exam where math>70 or english <70;
		查询语文成绩不大于80分的同学。
			select * from exam where not (chinese > 80);
		查询数学成绩为空(null)的同学
			select * from exam where math is null;
		查询所有同学的成绩，如果成绩中出现null则使用0分来代替。
			select name,ifnull(math,0),ifnull(chinese,0),ifnull(english,0) from exam;
			
		5.order by排序
			在查询语句的最后可以添加上一个order by 关键字，这时sql与语句的查询结果会进行排序显示。在排序中有升序asc和降序desc两种。
			select chinese from exam order by chinese asc;
		练习：
		对数学成绩排序后输出。
			select math from exam order by math;
		对总分排序按从高到低的顺序输出
			select name,ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0) as sum from exam order by sum desc;
		对姓李的学生成绩排序输出
			select  name,ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0) as sum from exam where name like '李%' order by sum; 
		6.聚集函数-count
			计算指定字段一共有多少行
			select count(column_name) from table_name;
		count函数使用方式：
			select count(name) from exam;
			select count(*) from exam;
			select count(1) from exam;
		练习：
		统计一个班级共有多少学生？
			select count(*) from exam;
		统计数学成绩大于90的学生有多少个？
			select count(math) from exam where math > 90;
		统计总分大于230的人数有多少？
			select count(name) from exam where ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0)>230;
		7.聚集函数-sum
			将满足where的数据求和。
			select sum(english) from exam where name = 'xxx';
			练习：
			统计一个班级数学总成绩？
				select sum(math) from exam;
			统计一个班级语文、英语、数学各科的总成绩
				select sum(math),sum(chinese),sum(english) from exam;
			统计一个班级语文、英语、数学的成绩总和
				select sum(ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0)) from exam;
			统计一个班级语文成绩平均分
			select sum(ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0)) / count(name) from exam;
			注意：sum仅对数值起作用，否则会报错。
			注意：对多列求和，“，”号不能少。
		8.聚集函数-avg
			将满足where的数据求平均值。
			select avg(math) from exam;
			练习：
			求一个班级数学平均分？
				select avg(math) from exam;
			求一个班级总分平均分？
				select avg(ifnull(math,0)+ifnull(chinese,0)+ifnull(english,0))  from exam;
		9.聚集函数-max、min
			Max/min函数返回满足where条件的一列的最大/最小值
			select max(chinese) from exam;
			select min(ifnull(math,0)) from exam;

		练习：
			求班级最高分和最低分（数值范围在统计中特别有用）
			选择表中语文成绩最高分的同学的姓名和成绩。
			select name,chinese 
			from exam
			where chinese in 
			(select max(chinese) from exam);
		10.分组函数
			利用group by 指定字段完成数据的分组操作。
			select id,camount from c group by id;
		创建表c：	
			create table c (
				id int,
				cdate date,
				camount int
			);
			insert into c values(1,'2007-07-09',7);
			insert into c values(2,'2007-07-09',3);
			insert into c values(2,'2007-07-10',3);
			insert into c values(2,'2007-07-11',1);
		分组操作 group by：
			在根据某一个字段分组之后，表中其他字段的数据会只显示第一条，其他的数据都会被隐藏，但是仍然可以通过聚集函数捕获到这些隐藏起来的值。
			在分组过程中可以使用多个分组字段，会一次根据分组条件进行划分。

		练习：对订单表中商品归类后，显示每一类商品的总价

		select product,sum(price) from orders
		group by product;
		+------+---------+-------+
		| id   | product | price |
		+------+---------+-------+
		|    1 | 电视    |   900 |
		|    2 | 洗衣机  |   100 |
		|    3 | 洗衣粉  |   180 |
		|    4 | 桔子    |     9 |

		+------+---------+-------+
		select product,sum(price) from orders
		group by product having sum(price)>100;
		
		在分组之前条件判断使用where，
		在分组之后条件判断使用having，
		使用having的位置不能用where替换，
		而使用where的位置可以使用having替换。
			---分组之前可以使用where或者having
			---分组之后只能使用having
3.多表设计
4.外键
	测试sql语句：
		部门中没有5号部门但是员工要进入到5号部门中
			insert into emp values( null,'路飞',5);
		在4号部门仍然由员工的状态下删除4号部门
			delete from dept where id = 4;

			create table dept(
			id int primary key auto_increment,
			name varchar(20)
			);
			insert into dept values(null, '财务部');
			insert into dept values(null, '人事部');
			insert into dept values(null, '科技部');
			insert into dept values(null, '销售部');
		 	create table emp(
			id int primary key auto_increment,
			name varchar(20),
			dept_id int,
			foreign key(dept_id) references dept(id)
			);
		 	insert into emp values(null, '张三', 1);
			insert into emp values(null, '李四', 2);
			insert into emp values(null, '老王', 3);
			insert into emp values(null, '赵四', 4);
			insert into emp values(null, '刘能', 4);
	外键使用的情景：
		外键在面对高并发和高吞吐的时候不推荐使用。如果使用外键会影响数据进入数据库，在面对大量数据的时候应该先保证数据入库，再处理数据的正确性，数据的正确性也可以通过后期的代码保证。

5.连接查询
	笛卡尔积
	内连接：
		在笛卡尔积查询的结果之上，获取左边表有且右边表也有的记录，这样的操作称之为内连接查询。

			select * from dept inner join emp
			on dept.id = emp.dept_id;
		字段使用别名：
			select emp.name as 姓名,dept.name as 部门 from dept
			inner join emp
			on dept.id = emp.dept_id;
		字段和表名都使用别名：
			select e.name as 姓名,d.name as 部门 from dept d
			inner join emp e
			on d.id = e.dept_id;
			在表使用别名之后，所有的表中字段获取方式要通过别名来获取，不能再使用原表名。
	外连接：
		左外连接查询：
			在内连接查询的基础之上获取左边表有而右边表没有的数据。
				select * from dept 
				left join emp
				on dept.id = emp.dept_id;
			表名使用别名：
				select * from dept d
				left join emp e
				on d.id = e.dept_id;	
			添加数据：
				insert into dept values(null,'市场部');

			结果：
				+----+--------+------+------+---------+
				| id | name   | id   | name | dept_id |
				+----+--------+------+------+---------+
				|  1 | 财务部 |    1 | 张飞 |       1 |
				|  2 | 人事部 |    2 | 关羽 |       2 |
				|  3 | 科技部 |    3 | 刘备 |       3 |
				|  4 | 销售部 |    4 | 赵云 |       4 |
				|  5 | 市场部 | NULL | NULL |    NULL |
				+----+--------+------+------+---------+
		右外连接查询：
			在内连接查询的基础之上获取右边表有而左边表没有的数据。
				select * from dept 
				right join emp
				on dept.id = emp.dept_id;
			表名使用别名：
					select * from dept d
					right join emp e
					on d.id = e.dept_id;	
			添加数据：
				insert into emp values(null,'路飞',6);
		全外连接查询：
			在内连接的查询基础之上，获取左边表有而右边表没有的数据和右边表有而左边表没有的数据。
			mysql中没有全外连接的关键字full join，所以我们只能通过一个union关键字实现全外连接的查询效果。
			union是一个联合查询的关键字，在这个关键字结果中，如果有相同的结果数据，则只会保留一份相同的数据。
			select * from dept
			full join emp         ------    没有full join
			on dept.id = emp.dept_id;

		select * from dept left join emp on dept.id=emp.dept_id
		union
		select * from dept right join emp on dept.id = emp.dept_id;
	
		