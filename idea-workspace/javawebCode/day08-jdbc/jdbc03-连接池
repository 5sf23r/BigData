1.准备工作
	1.1创建一个day08-jdbc项目
		创建一个包：src/cn.tedu.jdbc
		创建一个包：src/cn.tedu.utils
		创建一个文件夹：day08-jdbc/lib
	1.2把今天需要使用到的驱动包以及其他的jar包先复制到lib中，共5个包
		 右键单击lib-->选择ADD as Libaray-->在选项卡中【点击ok】

2.回顾上节课的知识点

3.普通的JDBCUtil

	JDBCUtil  是 每一次执行一个sql语句都需要打开和关闭连接，这样会大大的消耗了内存，严重影响执行效率

4.数据库的连接池技术

	数据库连接的建立及关闭资源消耗巨大。传统数据库访问方式：一次数据库访问对应一个物理连接,每次操作数据库都要打开、关闭该物理连接, 系统性能严重受损。
	解决方案：数据库连接池（Connection Pool）。
	系统初始运行时，主动建立足够的连接，组成一个池.每次应用程序请求数据库连接时，无需重新打开连接，而是从池中取出已有的连接，使用完后，不再关闭，而是归还。

	4.1 连接池技术的实现：DBCP
		创建一个类：utils/DBCPUtil.java

		创建一个文件： day08/src/dbcp-config.properties
			配置文件的通过流读取时，会默认从src下开始查找文件。

		4.1.1 加载第三方的jar包 ： lib 添加即可 
				commons-dbcp-1.4.jar  连接池的实现
				commons-pool-1.5.jar  连接池实现的依赖库

		4.1.2 在DBCPUtil中，定义一个数据库连接池的对象

		//import org.apache.commons.dbcp.BasicDataSource;
	 	private static BasicDataSource bds = null;
		//这是一个私有化的构造方法，不能new创建对象
	 	private DBCPUtil () {

	 	}
		//初始化连接池，也就是把连接池的基本信息获得
	 	public static void init() {
			//1.定义一个properties的对象
			Properties pros = new Properties();
			//2.通过流加载dbcp的配置文件
			try {
				pros.load(DBCPUtil.class.getClassLoader().getResourceAsStream("dbcp-config.properties"));
			}catch (Exception e) {

			}
			//3.通过pros对象获取参数：配置信息
			try {
				String driver = pros.getProperty("jdbc.driver");
				String url = pros.getProperty("jdbc.url");
				String user = pros.getProperty("jdbc.user");
				String password = pros.getProperty("jdbc.password");
				String initSizes = pros.getProperty("dataSource.initialSize");
				String maxIdle = pros.getProperty("dataSource.maxIdle");
				String minIdle = pros.getProperty("dataSource.minIdle");
				String maxActive = pros.getProperty("dataSource.maxActive");
				String maxWait = pros.getProperty("dataSource.maxWait");
				//4. 创建一个连接池对象
				bds = new BasicDataSource();
				//5. 把配置信息添加到连接池对象中
				bds.setDriverClassName(diver);
				bds.setUrl(url);
				bds.setUsername(user);
				bds.setPassword(password);
				//如果没有配置连接池的信息，那么给一个默认的值
				if (initSizes==null || "".equals(initSizes)) {
					bds.setInitSize(40);
				} else {
					bds.setInitSize(Integer.parseInt(initSizes));
				}
				if (maxIdle==null || "".equals(maxIdle)) {
					bds.setMaxIdle(60);
				} else {
					bds.setMaxIdle(Integer.parseInt(maxIdle));
				}
				if (minIdle==null || "".equals(minIdle)) {
					bds.setMinIdle(20);
				} else {
					bds.setMinIdle(Integer.parseInt(minIdle));
				}
				if (maxActive==null || "".equals(maxActive)) {
					bds.setMaxActive(50);
				} else {
					bds.setMaxActive(Integer.parseInt(maxActive));
				}
				if (maxWait==null || "".equals(maxWait)) {
					bds.setMaxWait(1000);
				} else {
					bds.setMaxWait(Integer.parseInt(maxWait));
				}


			} catch(Exception e) {
				System.out.println("数据库连接池初始化失败");

			}

	 	}

		public static Connection getConnection() {
			if (bds == null) {//如果为null，需要先初始化信息
				init();//静态方法，直接调用即可，上面的方法
			}
			Connection conn = null;
			try{
				conn = bds.getConnection();
			}catch(Exception e){

			}

			return conn;
		}

		public static void main(String[] args){
			Connection conn = DBCPUtil.getConnection();
			System.out.println(conn);
		}

		4.4 总结：DBCP的技术在其他的场景会经常用到，比如tomcat服务器中
				 对于程序员来说，代码写起来比较繁琐，后来又出现一种连接池技术


5. C3P0	连接池技术

	优点：C3P0的性能比DBCP更好，
		 C3P0的内置方法，会自动加载配置文件，不需要程序员手动写代码了
		 C3P0使用起来更加方便


	创建一个类： util/C3P0Util.java
	创建一个配置文件： day08/src/c3p0-config.xml

	public class C3P0Util {

		//1.定义一个成员变量
		//当进行new的对象创建时，会自动找到src/c3p0-config.xml文件
		//不需要进行配置信息初始化了
		private static ComboPooledDataSource cpd =
					new ComboPooledDataSource();

		//2.定义一个connection连接的方法
		public static Connection getConnection() {
			Connection conn = null;
			conn = cpd.getConnection();
			return conn;
		}

		//3.定义一个close方法，此方法是把连接释放会连接池
		public static void close(Connection conn,
									Statement state,
									ResultSet rs){
			if (state != null) {
				try{
					state.close();
				}
				catch(Exception e){

				}

			}
			if (conn != null) {
				try{
					conn.close();
				}
				catch(Exception e){

				}

			}
		}

		public static void main(String[] args){
			Connection conn = getConnection();
			System.out.println(conn);
		}

	}
