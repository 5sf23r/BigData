1. Request的继承结构

    ServletRequest：接口
        定义将客户端请求信息提供给某个 servlet 的对象。
        servlet 容器（tomcat服务器中的一个组件）创建 ServletRequest 对象，
        并将该对象作为参数传递给该 servlet 的 service 方法。

        这个ServletRequest：接受的请求 不仅仅是HTTP类型的请求
                            还可能是其他类型的请求，
           特别注意：javaweb课程，包括以后工作中，默认的都是HTTP协议的请求

    HttpServletRequest(以后写代码用)
            只接受：HTTP协议的请求

    主要作用：扩展 javax.servlet.ServletRequest 接口，
              为 HTTP servlet 提供请求信息。

        ServletRequest接口
               |
               | --- HttpServletRequest接口 （对ServletRequest的扩展）
               |           |                  （提供了更多的方法，去操作HTTP协议）
                            |
                            |  --- HttpServletRquestWrapper （实现类）
                            |    tomcat服务器会自动创建一个对象：HttpServletRequest类型的对象
                            |      HttpServletRequest   req = new  HttpServletRquestWrapper();

2. HttpServletRequest的常用方法

    2.1  通过request对象获取客户机（浏览器）相关的信息
            操作步骤：
            1.创建一个servlet类：Request01_获取客户机相关信息
                右键单击【src/cn.tedu.servlet这个包】
            /*("/request01") 代表的是 浏览器发送过来的请求信息  */
            @WebServlet("/request01") /*完全代替了web.xml的配置文件映射关系*/
            public class Request01_获取客户机相关信息 extends HttpServlet {
                protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    this.doGet(request,response);
                }

                protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //编写自己的业务逻辑
                    /**
                     * getRequestURL方法 -- 返回客户端发出请求完整URL
                     *    结果：http://localhost:80/day10_servlet_war_exploded/request01
                     * getRequestURI方法 -- 返回请求行中的资源名部分
                     *    结果： /request01
                     * getQueryString方法 -- 返回请求行中的参数部分
                     *     结果： username=...&password=...
                     * getRemoteAddr方法 -- 返回发出请求的客户机的IP地址
                     *     结果：127.0.0.1:80
                     * getMethod方法 -- 返回客户机的请求方式
                     *     结果：GET/POST
                     * getContextPath方法 -- 获得当前web应用的虚拟目录名称
                     *      结果：/day10_servlet_war_exploded
                     */
                    String url = request.getRequestURL().toString();
                    System.out.println("完整请求路径"+url);
                    String requestURI = request.getRequestURI();
                    System.out.println("资源路径："+requestURI);
                    String queryString = request.getQueryString();
                    System.out.println("请求行中参数："+queryString);
                    String remoteAddr = request.getRemoteAddr();
                    System.out.println("客户机的IP地址："+remoteAddr);
                    String contextPath = request.getContextPath();
                    System.out.println("虚拟目录名称："+contextPath);

                }
            }

