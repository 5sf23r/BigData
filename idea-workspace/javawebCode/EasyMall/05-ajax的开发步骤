1. 原生态的js脚本开发步骤

    1.1 确定开发思路

        1.1.1 确定js函数的触发时机：用户名文本框失去焦点时触发
        1.1.2 ajax发送的局部请求，服务器端需要对应一个servlet处理请求
        1.1.3 服务器返回的结果，需要显示在 前端html页面中

    1.2 开发步骤

        1.2.1 导入ajax-js的脚本 【工程/web/js】
                资源位置：【\day13-ServletContext-AM\课前预习\day13\代码】

        1.2.2 打开【js/ajax.js】,了解其中的函数内容
                创建了一个操作ajax的对象，各个浏览器都是存在该对象
                var xmlHttp = new XMLHttpRequest();

        1.2.3 打开【regist.jsp】页面，在其中编写js脚本实现ajax
                1.<input type="text" name="username"  onblur="ajaxCheckUsername(this)"  >
                    <span id="uid_msg">信息提示</span>
                2.引入ajax.js脚本
                    <script src="js/ajax.js"></script>
                3. 编写一个函数：ajaxCheckUsername(this)
                    <script>
                        function ajaxCheckUsername(obj) {
                            //1.获取文本框输入的内容value值
                            				var value = obj.value;
                            				console.log(value);
                            				//2.创建一个XMLHttpRequest对象
                            				var xr = ajaxFunction();
                            				//2.1 查看状态码： 0 表示对象刚刚创建，还没有使用
                            				console.log(xr.readyState);
                            				//3.使用xr对象，发送一个请求HttpRequest，会发送到服务器端
                            				//open()方法是打开与服务器的连接
                            				xr.open("post","/ajaxCheckUsername",true);
                            				console.log(xr.readyState);//状态码： 1 表示open方法调用了
                            				//4. 需要把参数添加到request请求中
                            				xr.send("username="+value);
                            				console.log(xr.readyState);//状态码： 2 表示发送了参数
                            				//5. 等待request请求发送到服务器端，服务器端处理完毕，返回结果
                            				//添加一个监听器，专门监听服务器端的响应
                            				xr.onreadystatechange = function () {
                            					console.log(xr.readyState);//状态码：3 表示开始响应，响应未结束
                            					if (xr.readyState==4) {//状态码：4 表示响应结束
                            						//判断：response对象响应的状态码：200 成功，404/500 错误
                            						if (xr.status == 200) {//响应成功
                            							console.log(xr.status);
                            						} else if(xr.status==404) {//资源路径错误
                            							console.log(xr.status);
                            						} else {//服务器错误
                            							console.log(xr.status);
                            						}
                            					}
                            				}
                        }
                    </script>

                4. 在服务器端，编写java代码，
                   创建一个类：cn.tedu.servlet/AjaxCheckUsername.java类

                    @WebServlet("/ajaxCheckUsername") /*与regist.jsp页面中发送的请求一致*/
                    public class AjaxCheckUsername extends HttpServlet {
                        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                            //目标：检查用户名是否已经存在
                            //1.设置请求与响应的编码格式
                            request.setCharacterEncoding("utf-8");
                            response.setContentType("text/html;charset=utf-8");
                            //2.获取请求中的参数
                            String username = request.getParameter("username");
                            //2.1 非空校验
                            if (WebUtils.isNull(username)) {
                                //因为ajax是局部刷新页面，所以不能使用 转发、重定向
                                response.getWriter().write("用户名不能为空");
                                return;
                            }
                            //3.判断数据库中是否存在该用户
                            Connection connection = C3P0Util.getConnection();
                            PreparedStatement ps = null;
                            ResultSet rs = null;
                            String sql = "select * from user where username=? ";
                            try {
                                ps = connection.prepareStatement(sql);
                                ps.setString(1,username);
                                rs = ps.executeQuery();
                                if (rs.next()) {//用户名已存在
                                    //因为ajax是局部刷新页面，所以不能使用 转发、重定向
                                    response.getWriter().write("用户名已存在");
                                } else {//用户名可以使用
                                    //因为ajax是局部刷新页面，所以不能使用 转发、重定向
                                    response.getWriter().write("用户名可以使用");
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            } finally {
                                C3P0Util.close(rs,ps,connection);
                            }
                        }

                5. 进一步完善regist.jsp页面中 ， js脚本
                    目标：获取servlet响应给浏览器的 查询结果









