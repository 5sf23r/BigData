1.工具类：为了代码的可重用型设计的
    工具类是提供公共的方法。一般来说，是静态的方法。
    因为：类在加载时，会直接加载静态的方法进入到 方法区。
          不需要根据对象的创建去调用，直接根据  类.方法名();
    把重复的代码提取成一个公用的方法：
        1.1  getConnection()方法

            public static Connection getConnection(){
                    Connection connection = null;
                    //1.1注册驱动程序
                    try {
                        DriverManager.registerDriver(new Driver());
                        String url = "jdbc:mysql://localhost:3306/javaweb";
                        String user = "root";
                        String password = "123456";
                        connection = DriverManager.getConnection(url,user,password);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    return connection;
                }

        1.2  close()方法

                //2.关闭连接的方法：参数是 结果集对象、语句对象、连接对象
                    public static void close (ResultSet resultSet,
                                              Statement statement,
                                              Connection connection) {
                        //2.1先进行非空校验
                        if (resultSet != null) {
                            try {
                                resultSet.close();/*close()方法直接有效，比null快速*/
                            } catch (SQLException e) {
                                e.printStackTrace();
                                resultSet = null;/*这里为null时，会被jvm虚拟机回收，回收时间不确定*/
                            }
                        }
                        if (statement!=null) {
                            try {
                                statement.close();
                            } catch (SQLException e) {
                                e.printStackTrace();
                                statement = null;
                            }
                        }
                        if (connection!=null) {
                            try {
                                connection.close();
                            } catch (SQLException e) {
                                e.printStackTrace();
                                connection = null;
                            }
                        }

                    }

        1.3 调用工具类的方法
            创建一个类：Demo02_jdbc工具类测试
            public static void main(String[] args) {
                    //1.获取一个数据库连接
                    Connection connection = JDBCUtil.getConnection();
                    Statement statement = null;
                    //2.创建一个sql语句的对象
                    try {
                        statement = connection.createStatement();
                        //3.执行sql语句
                        int rows = statement.executeUpdate
                                ("update teacher set t_age=40 where t_id=1 ");
                        System.out.println("受影响的行数："+rows);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    } finally {/*最终的代码块：无论sql是否执行成功，都需要关闭*/
                        JDBCUtil.close(null,statement,connection);
                    }
                }

        1.4 提取公共资源：提取出 用户名，密码，url信息
            把这些信息写入到配置文件中即可，
            以后数据库信息发生变动，只需要修改配置文件，而不需要修改代码。

            创建一个配置文件：src/jdbc-config.properties
            解释：
            properties的文本类型：内容写成key=value键值对

            //定义一个properties文本的对象，专门负责解析.properties的文本
            private static Properties pros = new Properties();
            //解析的内容通过静态代码块去执行
            //因为 静态代码块 在JDBCUtil这个类加载时，就会执行，把数据写入到了内存中
            static {
                //类加载器：是java的jdk内置的
                //类的加载过程：比如JDBCUtil这个类，中的静态方法被加载内存中
                                // 这个过程就是类加载器去处理完成
                //类加载器：是可以通过其他的类也可以获取得到
                try {
                    //pros.load() 会把输入流加载到pros对象中，
                    //那么我们就拿到了 文本中key与value
                    pros.load(JDBCUtil.class.getClassLoader().getResourceAsStream("jdbc-config.properties"));
                    System.out.println(pros);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        1.5 提取出一个信息：驱动的类型com.mysql.jdbc.Driver
            1.5.1配置文件中维护：driver=com.mysql.jdbc.Driver
            1.5.2程序中，加载驱动时，使用 Class.forName(driver);
                Class.forName("类型") -- 根据类型反射出一个对象

                Class.forName("com.mysql.jdbc.Driver")

                等价于

                Class.forName("com.mysql.jdbc.Driver" , true , this.getClass().getClassLoader())
                Class.forName("oracle.jdbc.driver.OracleDriver" , true , this.getClass().getClassLoader())

                参数一 ："com.mysql.jdbc.Driver" 需要创建对象的类型
                参数二 ：只有 initialize 参数为 true 且以前未被初始化时，才初始化该类
                            true: 以前未被加载过，才初始化该类，
                                  也就是才会创建一个对象，那么这个对象是单例的。
                参数三 ：this.getClass().getClassLoader()类加载器，
                        类加载器负责读取 Java 字节代码(.class文件)，
                        并转换成 java.lang.Class类的一个实例



